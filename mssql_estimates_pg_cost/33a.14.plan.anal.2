Aggregate  (cost=7411.80..7411.81 rows=1 width=192) (actual time=53.792..53.792 rows=1 loops=1)
  ->  Nested Loop  (cost=6.08..7411.43 rows=25 width=82) (actual time=9.336..53.780 rows=8 loops=1)
        ->  Nested Loop  (cost=5.66..7377.10 rows=77 width=67) (actual time=9.314..53.718 rows=28 loops=1)
              Join Filter: (mi_idx2.info_type_id = it2.id)
              Rows Removed by Join Filter: 2619
              ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.016 rows=1 loops=1)
                    Filter: ((info)::text = 'rating'::text)
                    Rows Removed by Filter: 112
              ->  Nested Loop  (cost=5.66..7373.81 rows=70 width=71) (actual time=0.546..53.534 rows=2647 loops=1)
                    ->  Nested Loop  (cost=5.24..7338.78 rows=79 width=56) (actual time=0.541..49.309 rows=2647 loops=1)
                          Join Filter: (t2.id = mc2.movie_id)
                          ->  Nested Loop  (cost=4.81..7314.58 rows=33 width=64) (actual time=0.537..47.754 rows=378 loops=1)
                                ->  Nested Loop  (cost=4.38..7305.45 rows=15 width=72) (actual time=0.532..47.362 rows=95 loops=1)
                                      ->  Nested Loop  (cost=3.95..7299.43 rows=10 width=59) (actual time=0.527..47.055 rows=71 loops=1)
                                            Join Filter: (kt2.id = t2.kind_id)
                                            Rows Removed by Join Filter: 31
                                            ->  Nested Loop  (cost=3.52..5724.26 rows=351 width=42) (actual time=0.109..43.588 rows=1220 loops=1)
                                                  ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=1)
                                                        Filter: ((kind)::text = 'tv series'::text)
                                                        Rows Removed by Filter: 6
                                                  ->  Nested Loop  (cost=3.52..5719.67 rows=351 width=38) (actual time=0.106..43.432 rows=1220 loops=1)
                                                        Join Filter: (kt1.id = t1.kind_id)
                                                        Rows Removed by Join Filter: 844
                                                        ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.001..0.003 rows=1 loops=1)
                                                              Filter: ((kind)::text = 'tv series'::text)
                                                              Rows Removed by Filter: 6
                                                        ->  Nested Loop  (cost=3.52..5692.28 rows=2104 width=42) (actual time=0.104..43.202 rows=2064 loops=1)
                                                              Join Filter: (ml.movie_id = t1.id)
                                                              ->  Hash Join  (cost=3.09..4363.87 rows=2250 width=17) (actual time=0.098..39.296 rows=2064 loops=1)
                                                                    Hash Cond: (ml.link_type_id = lt.id)
                                                                    ->  Merge Join  (cost=1.82..4144.25 rows=17998 width=21) (actual time=0.025..37.535 rows=20890 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Nested Loop  (cost=0.43..64518.65 rows=276007 width=9) (actual time=0.018..27.581 rows=21301 loops=1)
                                                                                Join Filter: (mi_idx1.info_type_id = it1.id)
                                                                                Rows Removed by Join Filter: 42602
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.71 rows=1380035 width=13) (actual time=0.006..9.645 rows=63903 loops=1)
                                                                                ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=63903)
                                                                                      ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                            Filter: ((info)::text = 'rating'::text)
                                                                                            Rows Removed by Filter: 112
                                                                          ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.005..4.529 rows=29997 loops=1)
                                                                    ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.007..0.007 rows=2 loops=1)
                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                          ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.005 rows=2 loops=1)
                                                                                Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                Rows Removed by Filter: 16
                                                              ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=2064)
                                                                    Index Cond: (id = mi_idx1.movie_id)
                                            ->  Index Scan using title_pkey on title t2  (cost=0.43..4.48 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=1220)
                                                  Index Cond: (id = ml.linked_movie_id)
                                                  Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                  Rows Removed by Filter: 1
                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.59 rows=1 width=13) (actual time=0.003..0.004 rows=1 loops=71)
                                            Index Cond: (movie_id = t2.id)
                                            Filter: (info < '3.0'::text)
                                            Rows Removed by Filter: 1
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=95)
                                      Index Cond: (movie_id = t1.id)
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.67 rows=5 width=8) (actual time=0.002..0.003 rows=7 loops=378)
                                Index Cond: (movie_id = mi_idx2.movie_id)
                    ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=2647)
                          Index Cond: (id = mc2.company_id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=28)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text = '[us]'::text)
              Rows Removed by Filter: 1
Planning time: 61.750 ms
Execution time: 53.885 ms
