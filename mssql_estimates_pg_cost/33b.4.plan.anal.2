Aggregate  (cost=8664.58..8664.59 rows=1 width=192) (actual time=93.698..93.698 rows=1 loops=1)
  ->  Nested Loop  (cost=682.44..8664.56 rows=1 width=82) (actual time=13.904..93.686 rows=4 loops=1)
        ->  Nested Loop  (cost=682.30..8664.39 rows=1 width=86) (actual time=13.902..93.681 rows=4 loops=1)
              ->  Nested Loop  (cost=682.17..8664.22 rows=1 width=90) (actual time=13.897..93.672 rows=4 loops=1)
                    Join Filter: (ml.linked_movie_id = t2.id)
                    ->  Nested Loop  (cost=681.74..8661.56 rows=5 width=81) (actual time=13.893..93.643 rows=10 loops=1)
                          ->  Nested Loop  (cost=681.32..8659.34 rows=5 width=66) (actual time=13.890..93.611 rows=10 loops=1)
                                Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                ->  Nested Loop  (cost=680.89..8658.61 rows=1 width=58) (actual time=13.884..93.581 rows=4 loops=1)
                                      Join Filter: (it2.id = mi_idx2.info_type_id)
                                      Rows Removed by Join Filter: 612
                                      ->  Nested Loop  (cost=680.46..8654.48 rows=2 width=53) (actual time=1.352..92.238 rows=477 loops=1)
                                            ->  Nested Loop  (cost=680.04..8567.54 rows=195 width=38) (actual time=1.291..76.296 rows=9674 loops=1)
                                                  Join Filter: (ml.movie_id = t1.id)
                                                  ->  Hash Join  (cost=679.61..8464.39 rows=195 width=29) (actual time=1.284..60.716 rows=9674 loops=1)
                                                        Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                        ->  Merge Join  (cost=674.77..8374.90 rows=22049 width=29) (actual time=1.253..57.005 rows=29022 loops=1)
                                                              Merge Cond: (ml.movie_id = mi_idx1.movie_id)
                                                              ->  Merge Join  (cost=668.51..6009.28 rows=7350 width=16) (actual time=1.227..34.393 rows=10098 loops=1)
                                                                    Merge Cond: (mc1.movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..131123.88 rows=2609129 width=8) (actual time=0.006..23.404 rows=99877 loops=1)
                                                                    ->  Sort  (cost=668.06..676.50 rows=3375 width=8) (actual time=1.161..1.867 rows=10173 loops=1)
                                                                          Sort Key: ml.movie_id
                                                                          Sort Method: quicksort  Memory: 205kB
                                                                          ->  Nested Loop  (cost=38.82..470.28 rows=3375 width=8) (actual time=0.061..0.813 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=2 width=4) (actual time=0.003..0.005 rows=2 loops=1)
                                                                                      Filter: ((link)::text ~~ '%follow%'::text)
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.053..0.276 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.042..0.042 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.71 rows=1380035 width=13) (actual time=0.004..12.763 rows=91546 loops=1)
                                                        ->  Hash  (cost=4.83..4.83 rows=1 width=8) (actual time=0.024..0.024 rows=1 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Nested Loop  (cost=0.00..4.83 rows=1 width=8) (actual time=0.021..0.023 rows=1 loops=1)
                                                                    ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                  ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=9674)
                                                        Index Cond: (id = mc1.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=0 loops=9674)
                                                  Index Cond: (id = mc1.company_id)
                                                  Filter: ((country_code)::text = '[nl]'::text)
                                                  Rows Removed by Filter: 1
                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.003 rows=1 loops=477)
                                            Index Cond: (movie_id = ml.linked_movie_id)
                                            Filter: (info < '3.0'::text)
                                            Rows Removed by Filter: 1
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.67 rows=5 width=8) (actual time=0.005..0.006 rows=2 loops=4)
                                      Index Cond: (movie_id = mi_idx2.movie_id)
                          ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=10)
                                Index Cond: (id = mc2.company_id)
                    ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=10)
                          Index Cond: (id = mc2.movie_id)
                          Filter: (production_year = 2007)
                          Rows Removed by Filter: 1
              ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=4)
                    Index Cond: (id = t2.kind_id)
                    Filter: ((kind)::text = 'tv series'::text)
        ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=4)
              Index Cond: (id = t1.kind_id)
              Filter: ((kind)::text = 'tv series'::text)
Planning time: 62.795 ms
Execution time: 93.806 ms
