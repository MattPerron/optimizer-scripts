Aggregate  (cost=9507.09..9507.10 rows=1 width=192) (actual time=47.321..47.321 rows=1 loops=1)
  ->  Nested Loop  (cost=6.08..9507.07 rows=1 width=82) (actual time=6.791..47.301 rows=8 loops=1)
        ->  Nested Loop  (cost=5.66..9506.63 rows=1 width=67) (actual time=6.788..47.278 rows=8 loops=1)
              Join Filter: (t2.id = mc2.movie_id)
              ->  Nested Loop  (cost=5.23..9505.89 rows=1 width=75) (actual time=6.782..47.264 rows=2 loops=1)
                    ->  Nested Loop  (cost=4.81..9505.00 rows=2 width=60) (actual time=6.771..47.212 rows=14 loops=1)
                          ->  Nested Loop  (cost=4.38..9503.79 rows=2 width=68) (actual time=6.765..47.179 rows=5 loops=1)
                                Join Filter: ((ml.movie_id = t1.id) AND (kt1.id = t1.kind_id))
                                ->  Nested Loop  (cost=3.95..9493.71 rows=17 width=51) (actual time=6.759..47.157 rows=5 loops=1)
                                      ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                            Filter: ((kind)::text = 'tv series'::text)
                                            Rows Removed by Filter: 6
                                      ->  Nested Loop  (cost=3.95..9492.45 rows=17 width=47) (actual time=6.752..47.148 rows=5 loops=1)
                                            Join Filter: (kt2.id = t2.kind_id)
                                            ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=1 width=4) (actual time=0.001..0.003 rows=1 loops=1)
                                                  Filter: ((kind)::text = 'tv series'::text)
                                                  Rows Removed by Filter: 6
                                            ->  Nested Loop  (cost=3.95..9489.89 rows=118 width=51) (actual time=6.750..47.142 rows=5 loops=1)
                                                  Join Filter: (ml.linked_movie_id = t2.id)
                                                  ->  Nested Loop  (cost=3.52..9005.93 rows=662 width=26) (actual time=6.742..47.005 rows=30 loops=1)
                                                        Join Filter: (it2.id = mi_idx2.info_type_id)
                                                        Rows Removed by Join Filter: 2756
                                                        ->  Hash Join  (cost=3.09..4363.98 rows=2250 width=21) (actual time=0.112..41.248 rows=2064 loops=1)
                                                              Hash Cond: (ml.link_type_id = lt.id)
                                                              ->  Merge Join  (cost=1.82..4144.36 rows=17998 width=25) (actual time=0.036..39.440 rows=20890 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Nested Loop  (cost=0.43..64521.07 rows=276007 width=13) (actual time=0.030..29.391 rows=21301 loops=1)
                                                                          Join Filter: (it1.id = mi_idx1.info_type_id)
                                                                          Rows Removed by Join Filter: 42602
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.71 rows=1380035 width=13) (actual time=0.007..9.488 rows=63903 loops=1)
                                                                          ->  Materialize  (cost=0.00..4.84 rows=1 width=8) (actual time=0.000..0.000 rows=1 loops=63903)
                                                                                ->  Nested Loop  (cost=0.00..4.83 rows=1 width=8) (actual time=0.018..0.020 rows=1 loops=1)
                                                                                      ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=1)
                                                                                            Filter: ((info)::text = 'rating'::text)
                                                                                            Rows Removed by Filter: 112
                                                                                      ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                            Filter: ((info)::text = 'rating'::text)
                                                                                            Rows Removed by Filter: 112
                                                                    ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.004..4.563 rows=29997 loops=1)
                                                              ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.007..0.007 rows=2 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                          Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                          Rows Removed by Filter: 16
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.003 rows=1 loops=2064)
                                                              Index Cond: (movie_id = ml.linked_movie_id)
                                                              Filter: (info < '3.0'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using title_pkey on title t2  (cost=0.43..0.72 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=30)
                                                        Index Cond: (id = mi_idx2.movie_id)
                                                        Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                        Rows Removed by Filter: 1
                                ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.004..0.004 rows=1 loops=5)
                                      Index Cond: (id = mi_idx1.movie_id)
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.004..0.006 rows=3 loops=5)
                                Index Cond: (movie_id = t1.id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=14)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text = '[us]'::text)
                          Rows Removed by Filter: 1
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.67 rows=5 width=8) (actual time=0.003..0.005 rows=4 loops=2)
                    Index Cond: (movie_id = mi_idx2.movie_id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8)
              Index Cond: (id = mc2.company_id)
Planning time: 62.161 ms
Execution time: 47.419 ms
