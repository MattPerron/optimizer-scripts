Aggregate  (cost=4287.44..4287.45 rows=1 width=192) (actual time=50.115..50.115 rows=1 loops=1)
  ->  Nested Loop  (cost=696.64..4287.42 rows=1 width=82) (actual time=8.377..50.102 rows=8 loops=1)
        Join Filter: ((t2.id = mi_idx2.movie_id) AND (it2.id = mi_idx2.info_type_id))
        Rows Removed by Join Filter: 807
        ->  Nested Loop  (cost=696.21..4286.90 rows=1 width=93) (actual time=2.153..48.949 rows=465 loops=1)
              ->  Nested Loop  (cost=696.08..4286.13 rows=5 width=97) (actual time=2.150..48.461 rows=465 loops=1)
                    Join Filter: (ml.movie_id = t1.id)
                    ->  Nested Loop  (cost=695.65..4283.48 rows=5 width=88) (actual time=2.146..47.667 rows=465 loops=1)
                          ->  Nested Loop  (cost=695.23..4281.27 rows=5 width=73) (actual time=2.143..46.799 rows=465 loops=1)
                                ->  Nested Loop  (cost=694.80..4277.28 rows=5 width=65) (actual time=2.140..46.509 rows=58 loops=1)
                                      Join Filter: (kt2.id = t2.kind_id)
                                      Rows Removed by Join Filter: 89
                                      ->  Nested Loop  (cost=694.80..4275.71 rows=32 width=69) (actual time=1.276..46.461 rows=147 loops=1)
                                            ->  Nested Loop  (cost=694.37..3470.18 rows=180 width=44) (actual time=1.269..41.912 rows=2083 loops=1)
                                                  ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..14.12 rows=1 width=4) (actual time=0.017..0.020 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                                  ->  Nested Loop  (cost=694.23..3454.26 rows=180 width=40) (actual time=1.251..41.610 rows=2083 loops=1)
                                                        ->  Nested Loop  (cost=693.81..3230.87 rows=501 width=25) (actual time=1.221..25.244 rows=9674 loops=1)
                                                              Join Filter: (ml.movie_id = mc1.movie_id)
                                                              ->  Nested Loop  (cost=693.38..3163.38 rows=103 width=17) (actual time=1.216..18.317 rows=2064 loops=1)
                                                                    Join Filter: (mi_idx1.info_type_id = it1.id)
                                                                    Rows Removed by Join Filter: 4128
                                                                    ->  Merge Join  (cost=693.38..2986.68 rows=11619 width=21) (actual time=1.200..16.736 rows=6192 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.71 rows=1380035 width=13) (actual time=0.006..9.666 rows=63901 loops=1)
                                                                          ->  Sort  (cost=692.91..702.29 rows=3750 width=8) (actual time=1.169..1.512 rows=6443 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Nested Loop  (cost=38.82..470.30 rows=3750 width=8) (actual time=0.062..0.819 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.054..0.278 rows=1158 loops=2)
                                                                                            Recheck Cond: (link_type_id = lt.id)
                                                                                            Heap Blocks: exact=191
                                                                                            ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.042..0.042 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                    ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=6192)
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.002 rows=5 loops=2064)
                                                                    Index Cond: (movie_id = mi_idx1.movie_id)
                                                        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=0 loops=9674)
                                                              Index Cond: (id = mc1.company_id)
                                                              Filter: ((country_code)::text = '[us]'::text)
                                                              Rows Removed by Filter: 1
                                            ->  Index Scan using title_pkey on title t2  (cost=0.43..4.48 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2083)
                                                  Index Cond: (id = ml.linked_movie_id)
                                                  Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                  Rows Removed by Filter: 1
                                      ->  Materialize  (cost=0.00..1.09 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=147)
                                            ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=1)
                                                  Filter: ((kind)::text = 'tv series'::text)
                                                  Rows Removed by Filter: 6
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.75 rows=5 width=8) (actual time=0.002..0.004 rows=8 loops=58)
                                      Index Cond: (movie_id = t2.id)
                          ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=465)
                                Index Cond: (id = mc2.company_id)
                    ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=465)
                          Index Cond: (id = mc1.movie_id)
              ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=465)
                    Index Cond: (id = t1.kind_id)
                    Filter: ((kind)::text = 'tv series'::text)
        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.51 rows=1 width=13) (actual time=0.002..0.002 rows=2 loops=465)
              Index Cond: (movie_id = mc2.movie_id)
              Filter: (info < '3.0'::text)
              Rows Removed by Filter: 1
Planning time: 62.277 ms
Execution time: 50.219 ms
