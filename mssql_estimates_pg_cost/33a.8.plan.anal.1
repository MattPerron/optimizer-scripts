Aggregate  (cost=9220.37..9220.38 rows=1 width=192) (actual time=25.071..25.071 rows=1 loops=1)
  ->  Nested Loop  (cost=696.50..9220.34 rows=2 width=82) (actual time=4.292..25.059 rows=8 loops=1)
        ->  Nested Loop  (cost=696.08..9219.45 rows=2 width=67) (actual time=4.288..25.036 rows=8 loops=1)
              Join Filter: (t2.id = mc2.movie_id)
              ->  Nested Loop  (cost=695.65..9217.99 rows=2 width=75) (actual time=4.282..25.024 rows=2 loops=1)
                    Join Filter: ((ml.linked_movie_id = t2.id) AND (kt2.id = t2.kind_id))
                    ->  Nested Loop  (cost=695.22..9169.57 rows=66 width=58) (actual time=4.277..24.974 rows=12 loops=1)
                          Join Filter: (kt1.id = t1.kind_id)
                          Rows Removed by Join Filter: 3
                          ->  Nested Loop  (cost=0.13..13.35 rows=1 width=8) (actual time=0.008..0.011 rows=1 loops=1)
                                ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..12.26 rows=1 width=4) (actual time=0.004..0.006 rows=1 loops=1)
                                      Filter: ((kind)::text = 'tv series'::text)
                                      Rows Removed by Filter: 6
                                ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.003..0.004 rows=1 loops=1)
                                      Filter: ((kind)::text = 'tv series'::text)
                                      Rows Removed by Filter: 6
                          ->  Nested Loop  (cost=695.09..9150.46 rows=461 width=58) (actual time=4.268..24.959 rows=15 loops=1)
                                Join Filter: (ml.movie_id = t1.id)
                                ->  Nested Loop  (cost=694.66..8906.60 rows=461 width=49) (actual time=4.261..24.912 rows=15 loops=1)
                                      ->  Nested Loop  (cost=694.24..8264.07 rows=1441 width=34) (actual time=4.252..24.688 rows=86 loops=1)
                                            Join Filter: (ml.movie_id = mc1.movie_id)
                                            ->  Nested Loop  (cost=693.81..7830.32 rows=662 width=26) (actual time=4.245..24.546 rows=30 loops=1)
                                                  Join Filter: (it2.id = mi_idx2.info_type_id)
                                                  Rows Removed by Join Filter: 2756
                                                  ->  Nested Loop  (cost=693.38..3188.37 rows=2250 width=21) (actual time=1.256..18.860 rows=2064 loops=1)
                                                        ->  Nested Loop  (cost=693.38..3157.83 rows=2250 width=17) (actual time=1.247..18.173 rows=2064 loops=1)
                                                              Join Filter: (mi_idx1.info_type_id = it1.id)
                                                              Rows Removed by Join Filter: 4128
                                                              ->  Merge Join  (cost=693.38..2986.68 rows=11249 width=21) (actual time=1.230..16.580 rows=6192 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.71 rows=1380035 width=13) (actual time=0.007..9.484 rows=63901 loops=1)
                                                                    ->  Sort  (cost=692.91..702.29 rows=3750 width=8) (actual time=1.199..1.534 rows=6443 loops=1)
                                                                          Sort Key: ml.movie_id
                                                                          Sort Method: quicksort  Memory: 205kB
                                                                          ->  Nested Loop  (cost=38.82..470.30 rows=3750 width=8) (actual time=0.063..0.842 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.055..0.286 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.043..0.043 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                              ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=6192)
                                                                    ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=2064)
                                                              ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.002 rows=1 loops=2064)
                                                        Index Cond: (movie_id = ml.linked_movie_id)
                                                        Filter: (info < '3.0'::text)
                                                        Rows Removed by Filter: 1
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=30)
                                                  Index Cond: (movie_id = mi_idx1.movie_id)
                                      ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=86)
                                            Index Cond: (id = mc1.company_id)
                                            Filter: ((country_code)::text = '[us]'::text)
                                            Rows Removed by Filter: 1
                                ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=15)
                                      Index Cond: (id = mc1.movie_id)
                    ->  Index Scan using title_pkey on title t2  (cost=0.43..0.72 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=12)
                          Index Cond: (id = mi_idx2.movie_id)
                          Filter: ((production_year >= 2005) AND (production_year <= 2008))
                          Rows Removed by Filter: 1
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.67 rows=5 width=8) (actual time=0.003..0.005 rows=4 loops=2)
                    Index Cond: (movie_id = mi_idx2.movie_id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8)
              Index Cond: (id = mc2.company_id)
Planning time: 62.070 ms
Execution time: 25.174 ms
