Aggregate  (cost=7911.18..7911.19 rows=1 width=192) (actual time=27.903..27.903 rows=1 loops=1)
  ->  Nested Loop  (cost=5463.99..7911.17 rows=1 width=82) (actual time=10.926..27.814 rows=114 loops=1)
        ->  Nested Loop  (cost=5463.57..7910.73 rows=1 width=67) (actual time=10.920..27.574 rows=114 loops=1)
              ->  Nested Loop  (cost=5463.14..7910.06 rows=1 width=75) (actual time=10.914..27.403 rows=46 loops=1)
                    ->  Nested Loop  (cost=5462.99..7902.22 rows=46 width=79) (actual time=10.911..27.349 rows=46 loops=1)
                          Join Filter: (ml.movie_id = t1.id)
                          ->  Nested Loop  (cost=5462.56..7877.89 rows=46 width=70) (actual time=10.904..27.234 rows=46 loops=1)
                                ->  Nested Loop  (cost=5462.14..7855.15 rows=51 width=55) (actual time=10.895..27.087 rows=51 loops=1)
                                      Join Filter: (ml.movie_id = mc1.movie_id)
                                      ->  Nested Loop  (cost=5461.71..7842.70 rows=19 width=47) (actual time=10.887..26.992 rows=19 loops=1)
                                            ->  Nested Loop  (cost=5461.56..7838.10 rows=27 width=51) (actual time=10.319..26.951 rows=27 loops=1)
                                                  Join Filter: (ml.linked_movie_id = t2.id)
                                                  ->  Nested Loop  (cost=5461.13..7808.59 rows=41 width=26) (actual time=10.307..26.754 rows=41 loops=1)
                                                        Join Filter: (mi_idx1.info_type_id = it1.id)
                                                        Rows Removed by Join Filter: 82
                                                        ->  Nested Loop  (cost=5461.13..7804.33 rows=123 width=30) (actual time=10.289..26.707 rows=123 loops=1)
                                                              Join Filter: (mi_idx2.info_type_id = it2.id)
                                                              Rows Removed by Join Filter: 8589
                                                              ->  Merge Join  (cost=5461.13..7671.23 rows=8712 width=34) (actual time=8.402..24.309 rows=8712 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.31 rows=1380035 width=13) (actual time=0.007..9.323 rows=63901 loops=1)
                                                                    ->  Sort  (cost=5460.69..5468.39 rows=3080 width=21) (actual time=8.369..8.863 rows=8888 loops=1)
                                                                          Sort Key: ml.movie_id
                                                                          Sort Method: quicksort  Memory: 337kB
                                                                          ->  Nested Loop  (cost=39.25..5282.23 rows=3080 width=21) (actual time=0.081..7.636 rows=3080 loops=1)
                                                                                ->  Nested Loop  (cost=38.82..488.81 rows=2315 width=8) (actual time=0.071..0.940 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..19.76 rows=2 width=4) (actual time=0.006..0.012 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.060..0.328 rows=1158 loops=2)
                                                                                            Recheck Cond: (link_type_id = lt.id)
                                                                                            Heap Blocks: exact=191
                                                                                            ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.047..0.047 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                      Index Cond: (movie_id = ml.linked_movie_id)
                                                                                      Filter: (info < '3.5'::text)
                                                                                      Rows Removed by Filter: 1
                                                              ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=8712)
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=123)
                                                              ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                  ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.004..0.004 rows=1 loops=41)
                                                        Index Cond: (id = mi_idx2.movie_id)
                                                        Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                        Rows Removed by Filter: 0
                                            ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=27)
                                                  Index Cond: (id = t2.kind_id)
                                                  Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                  Rows Removed by Filter: 0
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=19)
                                            Index Cond: (movie_id = mi_idx1.movie_id)
                                ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=51)
                                      Index Cond: (id = mc1.company_id)
                                      Filter: ((country_code)::text <> '[us]'::text)
                                      Rows Removed by Filter: 0
                          ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=46)
                                Index Cond: (id = mc1.movie_id)
                    ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=46)
                          Index Cond: (id = t1.kind_id)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=46)
                    Index Cond: (movie_id = t2.id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 59.485 ms
Execution time: 28.034 ms
