Aggregate  (cost=5561.17..5561.18 rows=1 width=192) (actual time=9.427..9.427 rows=1 loops=1)
  ->  Nested Loop  (cost=42.68..5561.16 rows=1 width=82) (actual time=0.865..9.351 rows=114 loops=1)
        ->  Nested Loop  (cost=42.26..5560.71 rows=1 width=67) (actual time=0.862..9.155 rows=114 loops=1)
              Join Filter: (it1.id = mi_idx1.info_type_id)
              Rows Removed by Join Filter: 228
              ->  Nested Loop  (cost=41.83..5560.18 rows=1 width=78) (actual time=0.856..8.879 rows=121 loops=1)
                    ->  Nested Loop  (cost=41.41..5559.73 rows=1 width=63) (actual time=0.847..8.581 rows=138 loops=1)
                          ->  Nested Loop  (cost=40.98..5559.12 rows=1 width=55) (actual time=0.842..8.419 rows=48 loops=1)
                                ->  Nested Loop  (cost=40.83..5558.77 rows=2 width=59) (actual time=0.839..8.360 rows=55 loops=1)
                                      Join Filter: (ml.linked_movie_id = t2.id)
                                      ->  Nested Loop  (cost=40.40..5556.10 rows=5 width=50) (actual time=0.813..8.107 rows=97 loops=1)
                                            Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                            ->  Nested Loop  (cost=39.97..5555.37 rows=1 width=42) (actual time=0.806..7.880 rows=47 loops=1)
                                                  ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..14.12 rows=1 width=4) (actual time=0.024..0.027 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                                  ->  Nested Loop  (cost=39.83..5541.24 rows=1 width=38) (actual time=0.781..7.846 rows=47 loops=1)
                                                        ->  Nested Loop  (cost=39.68..5533.24 rows=47 width=42) (actual time=0.776..7.793 rows=47 loops=1)
                                                              ->  Nested Loop  (cost=39.25..5323.14 rows=47 width=17) (actual time=0.769..7.612 rows=47 loops=1)
                                                                    Join Filter: (it2.id = mi_idx2.info_type_id)
                                                                    Rows Removed by Join Filter: 3033
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.014 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=39.25..5282.23 rows=3080 width=21) (actual time=0.090..7.413 rows=3080 loops=1)
                                                                          ->  Nested Loop  (cost=38.82..488.81 rows=2315 width=8) (actual time=0.075..0.904 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..19.76 rows=2 width=4) (actual time=0.006..0.012 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.059..0.321 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.047..0.047 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.5'::text)
                                                                                Rows Removed by Filter: 1
                                                              ->  Index Scan using title_pkey on title t1  (cost=0.43..4.47 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=47)
                                                                    Index Cond: (id = ml.movie_id)
                                                        ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=47)
                                                              Index Cond: (id = t1.kind_id)
                                                              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.66 rows=5 width=8) (actual time=0.003..0.004 rows=2 loops=47)
                                                  Index Cond: (movie_id = mi_idx2.movie_id)
                                      ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=97)
                                            Index Cond: (id = mc2.movie_id)
                                            Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                            Rows Removed by Filter: 0
                                ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=55)
                                      Index Cond: (id = t2.kind_id)
                                      Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                      Rows Removed by Filter: 0
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.003 rows=3 loops=48)
                                Index Cond: (movie_id = t1.id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=138)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text <> '[us]'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=121)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 59.153 ms
Execution time: 9.591 ms
