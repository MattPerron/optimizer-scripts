Aggregate  (cost=4267.34..4267.35 rows=1 width=192) (actual time=136.674..136.674 rows=1 loops=1)
  ->  Nested Loop  (cost=621.90..4267.32 rows=1 width=82) (actual time=16.198..136.597 rows=114 loops=1)
        Join Filter: ((t2.id = mi_idx2.movie_id) AND (it2.id = mi_idx2.info_type_id))
        Rows Removed by Join Filter: 20020
        ->  Nested Loop  (cost=621.47..4266.79 rows=1 width=93) (actual time=1.625..105.452 rows=15007 loops=1)
              ->  Nested Loop  (cost=621.05..4266.34 rows=1 width=78) (actual time=1.621..77.479 rows=17041 loops=1)
                    ->  Nested Loop  (cost=620.62..4265.73 rows=1 width=86) (actual time=1.615..67.461 rows=3063 loops=1)
                          ->  Nested Loop  (cost=620.47..4264.19 rows=9 width=90) (actual time=1.293..64.012 rows=3522 loops=1)
                                Join Filter: (ml.linked_movie_id = t2.id)
                                ->  Nested Loop  (cost=620.04..4252.98 rows=21 width=65) (actual time=1.270..48.095 rows=8624 loops=1)
                                      ->  Nested Loop  (cost=619.62..4243.66 rows=21 width=50) (actual time=1.264..31.858 rows=8624 loops=1)
                                            ->  Nested Loop  (cost=619.19..4227.78 rows=4 width=42) (actual time=1.256..23.565 rows=2064 loops=1)
                                                  Join Filter: (kt1.id = t1.kind_id)
                                                  Rows Removed by Join Filter: 844
                                                  ->  Nested Loop  (cost=619.19..4143.13 rows=2064 width=46) (actual time=1.251..22.901 rows=2064 loops=1)
                                                        Join Filter: (ml.movie_id = t1.id)
                                                        ->  Nested Loop  (cost=618.76..2924.54 rows=2064 width=21) (actual time=1.243..18.728 rows=2064 loops=1)
                                                              ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..14.12 rows=1 width=4) (actual time=0.020..0.024 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                              ->  Nested Loop  (cost=618.62..2889.78 rows=2064 width=17) (actual time=1.222..18.467 rows=2064 loops=1)
                                                                    Join Filter: (mi_idx1.info_type_id = it1.id)
                                                                    Rows Removed by Join Filter: 4128
                                                                    ->  Merge Join  (cost=618.62..2794.48 rows=6192 width=21) (actual time=1.205..16.854 rows=6192 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43815.31 rows=1380035 width=13) (actual time=0.006..9.763 rows=63901 loops=1)
                                                                          ->  Sort  (cost=618.18..623.97 rows=2315 width=8) (actual time=1.175..1.534 rows=6443 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Nested Loop  (cost=38.82..488.81 rows=2315 width=8) (actual time=0.069..0.819 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..19.76 rows=2 width=4) (actual time=0.005..0.008 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.056..0.279 rows=1158 loops=2)
                                                                                            Recheck Cond: (link_type_id = lt.id)
                                                                                            Heap Blocks: exact=191
                                                                                            ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.045..0.045 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                    ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=6192)
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                        ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=2064)
                                                              Index Cond: (id = mi_idx1.movie_id)
                                                  ->  Materialize  (cost=0.00..22.76 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=2064)
                                                        ->  Seq Scan on kind_type kt1  (cost=0.00..22.75 rows=2 width=4) (actual time=0.004..0.006 rows=2 loops=1)
                                                              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                              Rows Removed by Filter: 5
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..3.92 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=2064)
                                                  Index Cond: (movie_id = ml.linked_movie_id)
                                      ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8624)
                                            Index Cond: (id = mc2.company_id)
                                ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=8624)
                                      Index Cond: (id = mc2.movie_id)
                                      Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                      Rows Removed by Filter: 1
                          ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=3522)
                                Index Cond: (id = t2.kind_id)
                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                Rows Removed by Filter: 0
                    ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.001..0.002 rows=6 loops=3063)
                          Index Cond: (movie_id = t1.id)
              ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=17041)
                    Index Cond: (id = mc1.company_id)
                    Filter: ((country_code)::text <> '[us]'::text)
                    Rows Removed by Filter: 0
        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.51 rows=2 width=13) (actual time=0.001..0.002 rows=1 loops=15007)
              Index Cond: (movie_id = mc2.movie_id)
              Filter: (info < '3.5'::text)
              Rows Removed by Filter: 2
Planning time: 59.216 ms
Execution time: 136.805 ms
