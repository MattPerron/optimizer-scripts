Aggregate  (cost=5479.18..5479.19 rows=1 width=192) (actual time=7.672..7.672 rows=1 loops=1)
  ->  Nested Loop  (cost=42.68..5479.17 rows=1 width=82) (actual time=0.800..7.661 rows=8 loops=1)
        Join Filter: (it1.id = mi_idx1.info_type_id)
        Rows Removed by Join Filter: 16
        ->  Nested Loop  (cost=42.25..5474.88 rows=8 width=93) (actual time=0.793..7.637 rows=8 loops=1)
              Join Filter: ((ml.movie_id = t1.id) AND (kt1.id = t1.kind_id))
              ->  Nested Loop  (cost=41.82..5470.63 rows=8 width=76) (actual time=0.787..7.617 rows=8 loops=1)
                    ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..14.12 rows=1 width=4) (actual time=0.023..0.025 rows=1 loops=1)
                          Filter: ((info)::text = 'rating'::text)
                          Rows Removed by Filter: 112
                    ->  Nested Loop  (cost=41.68..5456.43 rows=8 width=72) (actual time=0.763..7.590 rows=8 loops=1)
                          ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.15..66.00 rows=1 width=4) (actual time=0.005..0.007 rows=1 loops=1)
                                Filter: ((kind)::text = 'tv series'::text)
                                Rows Removed by Filter: 6
                          ->  Nested Loop  (cost=41.53..5390.35 rows=8 width=68) (actual time=0.757..7.581 rows=8 loops=1)
                                ->  Nested Loop  (cost=41.11..5377.42 rows=29 width=53) (actual time=0.749..7.494 rows=29 loops=1)
                                      ->  Nested Loop  (cost=40.68..5333.74 rows=11 width=45) (actual time=0.743..7.445 rows=11 loops=1)
                                            ->  Nested Loop  (cost=40.26..5328.86 rows=11 width=30) (actual time=0.736..7.403 rows=11 loops=1)
                                                  Join Filter: (t2.id = mc2.movie_id)
                                                  ->  Nested Loop  (cost=39.83..5324.44 rows=6 width=38) (actual time=0.730..7.367 rows=6 loops=1)
                                                        ->  Nested Loop  (cost=39.68..5323.40 rows=6 width=42) (actual time=0.727..7.355 rows=6 loops=1)
                                                              Join Filter: (ml.linked_movie_id = t2.id)
                                                              ->  Nested Loop  (cost=39.25..5298.29 rows=34 width=17) (actual time=0.720..7.215 rows=34 loops=1)
                                                                    Join Filter: (it2.id = mi_idx2.info_type_id)
                                                                    Rows Removed by Join Filter: 2910
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=39.25..5259.08 rows=2944 width=21) (actual time=0.094..7.033 rows=2944 loops=1)
                                                                          ->  Nested Loop  (cost=38.82..488.81 rows=2315 width=8) (actual time=0.080..0.862 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..19.76 rows=2 width=4) (actual time=0.004..0.009 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.063..0.302 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.049..0.049 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.002 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.0'::text)
                                                                                Rows Removed by Filter: 1
                                                              ->  Index Scan using title_pkey on title t2  (cost=0.43..0.73 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=34)
                                                                    Index Cond: (id = mi_idx2.movie_id)
                                                                    Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=6)
                                                              Index Cond: (id = t2.kind_id)
                                                              Filter: ((kind)::text = 'tv series'::text)
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.004..0.005 rows=2 loops=6)
                                                        Index Cond: (movie_id = mi_idx2.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=11)
                                                  Index Cond: (id = mc2.company_id)
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..3.92 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=11)
                                            Index Cond: (movie_id = ml.movie_id)
                                ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=29)
                                      Index Cond: (id = mc1.company_id)
                                      Filter: ((country_code)::text = '[us]'::text)
                                      Rows Removed by Filter: 1
              ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=8)
                    Index Cond: (id = mc1.movie_id)
        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=8)
              Index Cond: (movie_id = t1.id)
Planning time: 60.546 ms
Execution time: 7.831 ms
