Aggregate  (cost=5379.83..5379.84 rows=1 width=192) (actual time=8.021..8.022 rows=1 loops=1)
  ->  Nested Loop  (cost=42.68..5379.82 rows=1 width=82) (actual time=0.769..8.008 rows=8 loops=1)
        ->  Nested Loop  (cost=42.26..5379.38 rows=1 width=67) (actual time=0.766..7.986 rows=8 loops=1)
              Join Filter: (t2.id = mc2.movie_id)
              ->  Nested Loop  (cost=41.83..5378.64 rows=1 width=75) (actual time=0.761..7.975 rows=2 loops=1)
                    ->  Nested Loop  (cost=41.68..5377.77 rows=5 width=79) (actual time=0.759..7.971 rows=2 loops=1)
                          ->  Nested Loop  (cost=41.26..5371.53 rows=14 width=64) (actual time=0.747..7.916 rows=14 loops=1)
                                ->  Nested Loop  (cost=40.83..5368.48 rows=5 width=72) (actual time=0.740..7.870 rows=5 loops=1)
                                      ->  Nested Loop  (cost=40.68..5367.61 rows=5 width=76) (actual time=0.735..7.858 rows=5 loops=1)
                                            Join Filter: (it1.id = mi_idx1.info_type_id)
                                            Rows Removed by Join Filter: 10
                                            ->  Nested Loop  (cost=40.25..5364.40 rows=6 width=71) (actual time=0.729..7.834 rows=6 loops=1)
                                                  ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..14.12 rows=1 width=4) (actual time=0.020..0.023 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                                  ->  Nested Loop  (cost=40.11..5350.22 rows=6 width=67) (actual time=0.709..7.809 rows=6 loops=1)
                                                        ->  Nested Loop  (cost=39.68..5323.40 rows=6 width=42) (actual time=0.703..7.780 rows=6 loops=1)
                                                              Join Filter: (ml.linked_movie_id = t2.id)
                                                              ->  Nested Loop  (cost=39.25..5298.29 rows=34 width=17) (actual time=0.695..7.615 rows=34 loops=1)
                                                                    Join Filter: (mi_idx2.info_type_id = it2.id)
                                                                    Rows Removed by Join Filter: 2910
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.013 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=39.25..5259.08 rows=2944 width=21) (actual time=0.078..7.421 rows=2944 loops=1)
                                                                          ->  Nested Loop  (cost=38.82..488.81 rows=2315 width=8) (actual time=0.067..0.916 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..19.76 rows=2 width=4) (actual time=0.004..0.010 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.064..0.328 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.052..0.052 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.0'::text)
                                                                                Rows Removed by Filter: 1
                                                              ->  Index Scan using title_pkey on title t2  (cost=0.43..0.73 rows=1 width=25) (actual time=0.005..0.005 rows=0 loops=34)
                                                                    Index Cond: (id = mi_idx2.movie_id)
                                                                    Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using title_pkey on title t1  (cost=0.43..4.47 rows=1 width=25) (actual time=0.004..0.004 rows=1 loops=6)
                                                              Index Cond: (id = ml.movie_id)
                                            ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=13) (actual time=0.003..0.003 rows=2 loops=6)
                                                  Index Cond: (movie_id = t1.id)
                                      ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.15..0.17 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=5)
                                            Index Cond: (id = t1.kind_id)
                                            Filter: ((kind)::text = 'tv series'::text)
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.005..0.008 rows=3 loops=5)
                                      Index Cond: (movie_id = t1.id)
                          ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.004..0.004 rows=0 loops=14)
                                Index Cond: (id = mc1.company_id)
                                Filter: ((country_code)::text = '[us]'::text)
                                Rows Removed by Filter: 1
                    ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.15..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=2)
                          Index Cond: (id = t2.kind_id)
                          Filter: ((kind)::text = 'tv series'::text)
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=2)
                    Index Cond: (movie_id = mi_idx2.movie_id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8)
              Index Cond: (id = mc2.company_id)
Planning time: 60.886 ms
Execution time: 8.147 ms
