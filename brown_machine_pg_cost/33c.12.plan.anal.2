Aggregate  (cost=10289.62..10289.63 rows=1 width=192) (actual time=43.771..43.771 rows=1 loops=1)
  ->  Hash Join  (cost=7553.49..10289.46 rows=11 width=84) (actual time=22.979..43.597 rows=114 loops=1)
        Hash Cond: (t2.kind_id = kt2.id)
        ->  Hash Join  (cost=7552.37..10287.91 rows=38 width=88) (actual time=22.174..43.533 rows=133 loops=1)
              Hash Cond: (t1.kind_id = kt1.id)
              ->  Nested Loop  (cost=7551.26..10285.28 rows=133 width=92) (actual time=22.157..43.451 rows=133 loops=1)
                    Join Filter: (ml.movie_id = t1.id)
                    ->  Nested Loop  (cost=7550.83..10214.93 rows=133 width=83) (actual time=22.152..43.069 rows=133 loops=1)
                          Join Filter: (mi_idx1.info_type_id = it1.id)
                          Rows Removed by Join Filter: 266
                          ->  Nested Loop  (cost=7550.83..10206.53 rows=399 width=87) (actual time=22.066..42.865 rows=399 loops=1)
                                ->  Nested Loop  (cost=7550.41..10005.88 rows=450 width=72) (actual time=22.061..41.631 rows=450 loops=1)
                                      Join Filter: (ml.movie_id = mc1.movie_id)
                                      ->  Nested Loop  (cost=7549.98..9905.63 rows=153 width=64) (actual time=22.057..40.963 rows=153 loops=1)
                                            ->  Nested Loop  (cost=7549.56..9837.79 rows=153 width=49) (actual time=22.053..40.536 rows=153 loops=1)
                                                  ->  Nested Loop  (cost=7549.13..9783.76 rows=81 width=57) (actual time=22.045..40.192 rows=81 loops=1)
                                                        Join Filter: (mi_idx2.info_type_id = it2.id)
                                                        Rows Removed by Join Filter: 3633
                                                        ->  Merge Join  (cost=7549.13..9725.64 rows=3714 width=61) (actual time=20.027..38.835 rows=3714 loops=1)
                                                              Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43810.54 rows=1380035 width=14) (actual time=0.008..10.995 rows=63901 loops=1)
                                                              ->  Sort  (cost=7548.68..7551.98 rows=1318 width=47) (actual time=19.989..20.290 rows=3794 loops=1)
                                                                    Sort Key: ml.movie_id
                                                                    Sort Method: quicksort  Memory: 210kB
                                                                    ->  Nested Loop  (cost=39.68..7480.39 rows=1318 width=47) (actual time=0.093..19.353 rows=1318 loops=1)
                                                                          Join Filter: (ml.linked_movie_id = t2.id)
                                                                          ->  Nested Loop  (cost=39.25..5263.71 rows=3080 width=22) (actual time=0.087..10.577 rows=3080 loops=1)
                                                                                ->  Nested Loop  (cost=38.82..470.30 rows=2315 width=8) (actual time=0.080..1.219 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.008 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.074..0.384 rows=1158 loops=2)
                                                                                            Recheck Cond: (link_type_id = lt.id)
                                                                                            Heap Blocks: exact=191
                                                                                            ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.059..0.059 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=14) (actual time=0.003..0.004 rows=1 loops=2315)
                                                                                      Index Cond: (movie_id = ml.linked_movie_id)
                                                                                      Filter: (info < '3.5'::text)
                                                                                      Rows Removed by Filter: 1
                                                                          ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=3080)
                                                                                Index Cond: (id = mi_idx2.movie_id)
                                                                                Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                                Rows Removed by Filter: 1
                                                        ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=3714)
                                                              ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.003..0.003 rows=2 loops=81)
                                                        Index Cond: (movie_id = t2.id)
                                            ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=153)
                                                  Index Cond: (id = mc2.company_id)
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.003 rows=3 loops=153)
                                            Index Cond: (movie_id = mi_idx1.movie_id)
                                ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=450)
                                      Index Cond: (id = mc1.company_id)
                                      Filter: ((country_code)::text <> '[us]'::text)
                                      Rows Removed by Filter: 0
                          ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=399)
                                ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 112
                    ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=133)
                          Index Cond: (id = mc1.movie_id)
              ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.012..0.012 rows=2 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.010..0.011 rows=2 loops=1)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                          Rows Removed by Filter: 5
        ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.010..0.010 rows=2 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.006..0.008 rows=2 loops=1)
                    Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                    Rows Removed by Filter: 5
Planning time: 86.827 ms
Execution time: 43.900 ms
