Aggregate  (cost=131538.32..131538.33 rows=1 width=32) (actual time=2174.336..2174.336 rows=1 loops=1)
  ->  Nested Loop  (cost=95185.42..131538.24 rows=33 width=17) (actual time=1335.789..2174.244 rows=33 loops=1)
        ->  Hash Join  (cost=95184.99..131523.21 rows=33 width=21) (actual time=1335.762..2174.030 rows=33 loops=1)
              Hash Cond: (cc.status_id = cct2.id)
              ->  Hash Join  (cost=95183.91..131521.79 rows=33 width=25) (actual time=1335.739..2173.986 rows=33 loops=1)
                    Hash Cond: (ci.person_role_id = chn.id)
                    ->  Nested Loop  (cost=3780.36..33391.53 rows=532809 width=29) (actual time=50.401..854.217 rows=532809 loops=1)
                          Join Filter: (t.id = ci.movie_id)
                          ->  Hash Join  (cost=3779.79..21441.98 rows=6016 width=33) (actual time=50.388..213.095 rows=6016 loops=1)
                                Hash Cond: (t.kind_id = kt.id)
                                ->  Nested Loop  (cost=3778.69..21357.25 rows=7363 width=37) (actual time=49.711..209.844 rows=7363 loops=1)
                                      ->  Hash Join  (cost=3778.26..17064.34 rows=8765 width=12) (actual time=49.699..164.967 rows=8765 loops=1)
                                            Hash Cond: (cc.subject_id = cct1.id)
                                            ->  Hash Join  (cost=3777.20..16929.97 rows=12810 width=16) (actual time=49.692..161.081 rows=12810 loops=1)
                                                  Hash Cond: (mk.movie_id = cc.movie_id)
                                                  ->  Nested Loop  (cost=6.77..12178.50 rows=35548 width=4) (actual time=0.634..95.146 rows=35548 loops=1)
                                                        ->  Seq Scan on keyword k  (cost=0.00..3632.40 rows=8 width=4) (actual time=0.145..43.329 rows=8 loops=1)
                                                              Filter: (keyword = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                                              Rows Removed by Filter: 134162
                                                        ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.77..1065.25 rows=301 width=8) (actual time=1.105..5.790 rows=4444 loops=8)
                                                              Recheck Cond: (keyword_id = k.id)
                                                              Heap Blocks: exact=23488
                                                              ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.69 rows=301 width=0) (actual time=0.606..0.606 rows=4444 loops=8)
                                                                    Index Cond: (keyword_id = k.id)
                                                  ->  Hash  (cost=2081.86..2081.86 rows=135086 width=12) (actual time=48.738..48.738 rows=135086 loops=1)
                                                        Buckets: 262144  Batches: 1  Memory Usage: 7853kB
                                                        ->  Seq Scan on complete_cast cc  (cost=0.00..2081.86 rows=135086 width=12) (actual time=0.009..24.370 rows=135086 loops=1)
                                            ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                        Filter: ((kind)::text = 'cast'::text)
                                                        Rows Removed by Filter: 3
                                      ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.005..0.005 rows=1 loops=8765)
                                            Index Cond: (id = mk.movie_id)
                                            Filter: (production_year > 1950)
                                            Rows Removed by Filter: 0
                                ->  Hash  (cost=1.09..1.09 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                      ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                            Filter: ((kind)::text = 'movie'::text)
                                            Rows Removed by Filter: 6
                          ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.006..0.085 rows=89 loops=6016)
                                Index Cond: (movie_id = mk.movie_id)
                    ->  Hash  (cost=91403.18..91403.18 rows=30 width=4) (actual time=1273.525..1273.525 rows=30 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 10kB
                          ->  Seq Scan on char_name chn  (cost=0.00..91403.18 rows=30 width=4) (actual time=35.956..1273.479 rows=30 loops=1)
                                Filter: ((name !~~ '%Sherlock%'::text) AND ((name ~~ '%Tony%Stark%'::text) OR (name ~~ '%Iron%Man%'::text)))
                                Rows Removed by Filter: 3140309
              ->  Hash  (cost=1.05..1.05 rows=2 width=4) (actual time=0.010..0.010 rows=2 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=2 width=4) (actual time=0.007..0.007 rows=2 loops=1)
                          Filter: ((kind)::text ~~ '%complete%'::text)
                          Rows Removed by Filter: 2
        ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=33)
              Index Cond: (id = ci.person_id)
              Heap Fetches: 33
Planning time: 13.136 ms
Execution time: 2174.483 ms
