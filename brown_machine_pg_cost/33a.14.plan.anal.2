Aggregate  (cost=8931.28..8931.29 rows=1 width=192) (actual time=63.266..63.266 rows=1 loops=1)
  ->  Nested Loop  (cost=6.66..8931.16 rows=8 width=84) (actual time=8.662..63.243 rows=8 loops=1)
        ->  Nested Loop  (cost=6.24..8918.67 rows=28 width=69) (actual time=8.654..63.154 rows=28 loops=1)
              ->  Nested Loop  (cost=5.81..8912.59 rows=10 width=77) (actual time=8.650..63.102 rows=10 loops=1)
                    Join Filter: ((ml.linked_movie_id = t2.id) AND (kt2.id = t2.kind_id))
                    ->  Nested Loop  (cost=5.38..8883.62 rows=54 width=76) (actual time=8.645..62.933 rows=54 loops=1)
                          ->  Nested Loop  (cost=4.96..8859.67 rows=54 width=61) (actual time=8.641..62.747 rows=54 loops=1)
                                Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                ->  Nested Loop  (cost=4.53..8839.02 rows=28 width=53) (actual time=8.636..62.601 rows=28 loops=1)
                                      Join Filter: (kt1.id = t1.kind_id)
                                      Rows Removed by Join Filter: 2
                                      ->  Nested Loop  (cost=0.00..2.18 rows=1 width=8) (actual time=0.008..0.013 rows=1 loops=1)
                                            ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                                                  Filter: ((kind)::text = 'tv series'::text)
                                                  Rows Removed by Filter: 6
                                            ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.001..0.004 rows=1 loops=1)
                                                  Filter: ((kind)::text = 'tv series'::text)
                                                  Rows Removed by Filter: 6
                                      ->  Nested Loop  (cost=4.53..8836.46 rows=30 width=53) (actual time=8.627..62.575 rows=30 loops=1)
                                            Join Filter: (ml.movie_id = t1.id)
                                            ->  Nested Loop  (cost=4.10..8818.75 rows=30 width=28) (actual time=8.621..62.447 rows=30 loops=1)
                                                  Join Filter: (mi_idx2.info_type_id = it2.id)
                                                  Rows Removed by Join Filter: 2756
                                                  ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.017 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                                  ->  Nested Loop  (cost=4.10..8781.51 rows=2786 width=32) (actual time=0.134..62.092 rows=2786 loops=1)
                                                        ->  Hash Join  (cost=3.68..4528.45 rows=2064 width=18) (actual time=0.126..53.307 rows=2064 loops=1)
                                                              Hash Cond: (ml.link_type_id = lt.id)
                                                              ->  Merge Join  (cost=2.40..4273.75 rows=20890 width=22) (actual time=0.032..50.761 rows=20890 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Nested Loop  (cost=0.43..64513.48 rows=459925 width=10) (actual time=0.024..37.200 rows=21301 loops=1)
                                                                          Join Filter: (it1.id = mi_idx1.info_type_id)
                                                                          Rows Removed by Join Filter: 42602
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43810.54 rows=1380035 width=14) (actual time=0.008..12.539 rows=63903 loops=1)
                                                                          ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=63903)
                                                                                ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                                                                      Filter: ((info)::text = 'rating'::text)
                                                                                      Rows Removed by Filter: 112
                                                                    ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.006..5.626 rows=29997 loops=1)
                                                              ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.009..0.009 rows=2 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.007 rows=2 loops=1)
                                                                          Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                          Rows Removed by Filter: 16
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=14) (actual time=0.003..0.004 rows=1 loops=2064)
                                                              Index Cond: (movie_id = ml.linked_movie_id)
                                                              Filter: (info < '3.0'::text)
                                                              Rows Removed by Filter: 1
                                            ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=30)
                                                  Index Cond: (id = mi_idx1.movie_id)
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.003..0.004 rows=2 loops=28)
                                      Index Cond: (movie_id = mi_idx2.movie_id)
                          ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=54)
                                Index Cond: (id = mc2.company_id)
                    ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=54)
                          Index Cond: (id = mc2.movie_id)
                          Filter: ((production_year >= 2005) AND (production_year <= 2008))
                          Rows Removed by Filter: 1
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=10)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=28)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text = '[us]'::text)
              Rows Removed by Filter: 1
Planning time: 89.015 ms
Execution time: 63.385 ms
