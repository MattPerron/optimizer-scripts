Aggregate  (cost=25967.36..25967.37 rows=1 width=64) (actual time=275.215..275.215 rows=1 loops=1)
  ->  Nested Loop  (cost=8.06..25967.35 rows=1 width=23) (actual time=7.367..274.619 rows=761 loops=1)
        Join Filter: (mi.info_type_id = it1.id)
        Rows Removed by Join Filter: 117
        ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.020 rows=1 loops=1)
              Filter: ((info)::text = 'countries'::text)
              Rows Removed by Filter: 112
        ->  Nested Loop  (cost=8.06..25956.46 rows=678 width=27) (actual time=7.357..274.348 rows=878 loops=1)
              Join Filter: (t.id = mi.movie_id)
              ->  Nested Loop  (cost=7.62..25558.32 rows=213 width=35) (actual time=7.200..218.316 rows=1147 loops=1)
                    Join Filter: (mi_idx.info_type_id = it2.id)
                    Rows Removed by Join Filter: 2256
                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.016 rows=1 loops=1)
                          Filter: ((info)::text = 'rating'::text)
                          Rows Removed by Filter: 112
                    ->  Nested Loop  (cost=7.62..25513.37 rows=3403 width=39) (actual time=7.079..217.668 rows=3403 loops=1)
                          Join Filter: (t.id = mi_idx.movie_id)
                          ->  Nested Loop  (cost=7.20..24460.85 rows=1966 width=25) (actual time=7.071..207.407 rows=1966 loops=1)
                                Join Filter: (t.kind_id = kt.id)
                                Rows Removed by Join Filter: 616
                                ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.002..0.006 rows=1 loops=1)
                                      Filter: ((kind)::text = 'movie'::text)
                                      Rows Removed by Filter: 6
                                ->  Nested Loop  (cost=7.20..24427.48 rows=2582 width=29) (actual time=4.161..206.740 rows=2582 loops=1)
                                      ->  Nested Loop  (cost=6.77..6261.07 rows=37091 width=4) (actual time=4.080..82.785 rows=37091 loops=1)
                                            ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=3 width=4) (actual time=1.327..28.371 rows=3 loops=1)
                                                  Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                  Rows Removed by Filter: 134167
                                            ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.77..1096.83 rows=301 width=8) (actual time=3.196..16.071 rows=12364 loops=3)
                                                  Recheck Cond: (keyword_id = k.id)
                                                  Heap Blocks: exact=26312
                                                  ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.69 rows=301 width=0) (actual time=1.616..1.616 rows=12364 loops=3)
                                                        Index Cond: (keyword_id = k.id)
                                      ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=37091)
                                            Index Cond: (id = mk.movie_id)
                                            Filter: (production_year > 2010)
                                            Rows Removed by Filter: 1
                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=1966)
                                Index Cond: (movie_id = mk.movie_id)
                                Filter: (info < '8.5'::text)
                                Rows Removed by Filter: 0
              ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.84 rows=2 width=8) (actual time=0.040..0.048 rows=1 loops=1147)
                    Index Cond: (movie_id = mk.movie_id)
                    Filter: (info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))
                    Rows Removed by Filter: 69
Planning time: 5.118 ms
Execution time: 275.303 ms
