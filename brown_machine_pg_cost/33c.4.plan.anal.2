Aggregate  (cost=2972.20..2972.21 rows=1 width=192) (actual time=32.584..32.585 rows=1 loops=1)
  ->  Nested Loop  (cost=608.24..2972.18 rows=1 width=84) (actual time=5.265..32.416 rows=114 loops=1)
        ->  Nested Loop  (cost=608.10..2971.57 rows=4 width=88) (actual time=5.261..32.218 rows=114 loops=1)
              Join Filter: (ml.movie_id = t1.id)
              ->  Nested Loop  (cost=607.67..2969.46 rows=4 width=79) (actual time=5.257..31.906 rows=114 loops=1)
                    ->  Nested Loop  (cost=607.25..2966.33 rows=7 width=64) (actual time=5.253..31.505 rows=131 loops=1)
                          Join Filter: (ml.movie_id = mc1.movie_id)
                          ->  Nested Loop  (cost=606.82..2965.68 rows=1 width=56) (actual time=5.249..31.282 rows=44 loops=1)
                                ->  Nested Loop  (cost=606.40..2965.24 rows=1 width=41) (actual time=5.245..31.141 rows=44 loops=1)
                                      ->  Nested Loop  (cost=605.97..2964.57 rows=1 width=49) (actual time=5.240..31.050 rows=19 loops=1)
                                            ->  Nested Loop  (cost=605.84..2964.40 rows=1 width=53) (actual time=4.474..30.990 rows=27 loops=1)
                                                  Join Filter: (ml.linked_movie_id = t2.id)
                                                  ->  Nested Loop  (cost=605.41..2963.68 rows=1 width=28) (actual time=4.469..30.825 rows=41 loops=1)
                                                        Join Filter: (it2.id = mi_idx2.info_type_id)
                                                        Rows Removed by Join Filter: 2863
                                                        ->  Hash Join  (cost=604.98..2849.53 rows=55 width=22) (actual time=1.562..22.434 rows=2064 loops=1)
                                                              Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                              ->  Merge Join  (cost=600.14..2820.91 rows=6192 width=22) (actual time=1.522..21.167 rows=6192 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43810.54 rows=1380035 width=14) (actual time=0.008..10.912 rows=63901 loops=1)
                                                                    ->  Sort  (cost=599.67..605.46 rows=2315 width=8) (actual time=1.485..2.103 rows=6443 loops=1)
                                                                          Sort Key: ml.movie_id
                                                                          Sort Method: quicksort  Memory: 205kB
                                                                          ->  Nested Loop  (cost=38.82..470.30 rows=2315 width=8) (actual time=0.080..1.001 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.008 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.074..0.312 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.059..0.059 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                              ->  Hash  (cost=4.83..4.83 rows=1 width=8) (actual time=0.031..0.031 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Nested Loop  (cost=0.00..4.83 rows=1 width=8) (actual time=0.026..0.029 rows=1 loops=1)
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                                          ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.012 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=14) (actual time=0.003..0.004 rows=1 loops=2064)
                                                              Index Cond: (movie_id = ml.linked_movie_id)
                                                              Filter: (info < '3.5'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=41)
                                                        Index Cond: (id = mi_idx2.movie_id)
                                                        Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                        Rows Removed by Filter: 0
                                            ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=27)
                                                  Index Cond: (id = t2.kind_id)
                                                  Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                  Rows Removed by Filter: 0
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.003..0.004 rows=2 loops=19)
                                            Index Cond: (movie_id = t2.id)
                                ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=44)
                                      Index Cond: (id = mc2.company_id)
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.004 rows=3 loops=44)
                                Index Cond: (movie_id = mi_idx1.movie_id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text <> '[us]'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=114)
                    Index Cond: (id = mc1.movie_id)
        ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=114)
              Index Cond: (id = t1.kind_id)
              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
Planning time: 87.204 ms
Execution time: 32.710 ms
