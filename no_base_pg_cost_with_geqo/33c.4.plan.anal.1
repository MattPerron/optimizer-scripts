Aggregate  (cost=9179.72..9179.73 rows=1 width=192) (actual time=158.623..158.623 rows=1 loops=1)
  ->  Nested Loop  (cost=5.30..9179.70 rows=1 width=84) (actual time=21.129..158.540 rows=114 loops=1)
        Join Filter: (t1.kind_id = kt1.id)
        ->  Nested Loop  (cost=5.30..9178.59 rows=1 width=88) (actual time=21.121..158.411 rows=114 loops=1)
              ->  Nested Loop  (cost=4.88..9178.14 rows=1 width=73) (actual time=21.117..158.149 rows=131 loops=1)
                    Join Filter: (kt2.id = t2.kind_id)
                    Rows Removed by Join Filter: 169
                    ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.006..0.008 rows=2 loops=1)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                          Rows Removed by Filter: 5
                    ->  Materialize  (cost=4.88..9177.00 rows=2 width=77) (actual time=9.137..79.041 rows=150 loops=2)
                          ->  Nested Loop  (cost=4.88..9176.99 rows=2 width=77) (actual time=18.270..158.016 rows=150 loops=1)
                                Join Filter: (ml.linked_movie_id = t2.id)
                                ->  Nested Loop  (cost=4.45..9174.85 rows=4 width=68) (actual time=18.261..157.432 rows=293 loops=1)
                                      Join Filter: (mi_idx2.info_type_id = it2.id)
                                      Rows Removed by Join Filter: 71369
                                      ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                            Filter: ((info)::text = 'rating'::text)
                                            Rows Removed by Filter: 112
                                      ->  Nested Loop  (cost=4.45..9166.50 rows=475 width=72) (actual time=0.149..151.394 rows=71662 loops=1)
                                            ->  Nested Loop  (cost=4.02..8886.57 rows=460 width=80) (actual time=0.145..106.140 rows=12349 loops=1)
                                                  ->  Nested Loop  (cost=3.60..8682.61 rows=460 width=65) (actual time=0.140..82.078 rows=12349 loops=1)
                                                        Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                                        ->  Nested Loop  (cost=3.17..8621.56 rows=84 width=57) (actual time=0.133..70.046 rows=2904 loops=1)
                                                              ->  Nested Loop  (cost=2.74..8507.68 rows=55 width=43) (actual time=0.125..63.170 rows=2064 loops=1)
                                                                    Join Filter: (mi_idx1.info_type_id = it1.id)
                                                                    Rows Removed by Join Filter: 4128
                                                                    ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.007..0.009 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=2.74..8427.87 rows=6192 width=47) (actual time=0.111..62.306 rows=6192 loops=1)
                                                                          Join Filter: (ml.movie_id = t1.id)
                                                                          ->  Hash Join  (cost=2.31..4772.10 rows=6192 width=22) (actual time=0.104..51.103 rows=6192 loops=1)
                                                                                Hash Cond: (ml.link_type_id = lt.id)
                                                                                ->  Merge Join  (cost=1.03..4010.50 rows=62670 width=26) (actual time=0.014..44.079 rows=62670 loops=1)
                                                                                      Merge Cond: (ml.movie_id = mi_idx1.movie_id)
                                                                                      ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.007..5.154 rows=29997 loops=1)
                                                                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43804.18 rows=1380035 width=14) (actual time=0.005..17.696 rows=114373 loops=1)
                                                                                ->  Hash  (cost=1.25..1.25 rows=3 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=3 width=4) (actual time=0.002..0.004 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                          ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=6192)
                                                                                Index Cond: (id = mi_idx1.movie_id)
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=14) (actual time=0.002..0.003 rows=1 loops=2064)
                                                                    Index Cond: (movie_id = ml.linked_movie_id)
                                                                    Filter: (info < '3.5'::text)
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.66 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=2904)
                                                              Index Cond: (movie_id = mi_idx2.movie_id)
                                                  ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=12349)
                                                        Index Cond: (id = mc2.company_id)
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.001..0.002 rows=6 loops=12349)
                                                  Index Cond: (movie_id = t1.id)
                                ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=293)
                                      Index Cond: (id = mc2.movie_id)
                                      Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                      Rows Removed by Filter: 0
              ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
                    Index Cond: (id = mc1.company_id)
                    Filter: ((country_code)::text <> '[us]'::text)
                    Rows Removed by Filter: 0
        ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.001..0.001 rows=1 loops=114)
              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
              Rows Removed by Filter: 1
Planning time: 59.143 ms
Execution time: 158.728 ms
