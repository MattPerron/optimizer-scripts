Aggregate  (cost=5554.29..5554.30 rows=1 width=192) (actual time=9.020..9.020 rows=1 loops=1)
  ->  Nested Loop  (cost=41.18..5554.27 rows=1 width=84) (actual time=0.771..8.941 rows=114 loops=1)
        ->  Nested Loop  (cost=40.76..5553.83 rows=1 width=69) (actual time=0.769..8.689 rows=114 loops=1)
              ->  Nested Loop  (cost=40.33..5553.16 rows=1 width=77) (actual time=0.764..8.517 rows=46 loops=1)
                    ->  Nested Loop  (cost=40.19..5553.00 rows=1 width=81) (actual time=0.762..8.457 rows=46 loops=1)
                          Join Filter: (ml.movie_id = t1.id)
                          ->  Nested Loop  (cost=39.76..5552.47 rows=1 width=72) (actual time=0.757..8.347 rows=46 loops=1)
                                Join Filter: ((ml.movie_id = mi_idx1.movie_id) AND (it1.id = mi_idx1.info_type_id))
                                Rows Removed by Join Filter: 92
                                ->  Nested Loop  (cost=39.34..5538.35 rows=26 width=66) (actual time=0.750..8.201 rows=49 loops=1)
                                      ->  Nested Loop  (cost=38.92..5516.95 rows=48 width=51) (actual time=0.744..8.062 rows=54 loops=1)
                                            ->  Nested Loop  (cost=38.49..5497.10 rows=5 width=43) (actual time=0.739..7.968 rows=21 loops=1)
                                                  Join Filter: (kt2.id = t2.kind_id)
                                                  Rows Removed by Join Filter: 16
                                                  ->  Nested Loop  (cost=38.49..5495.46 rows=19 width=47) (actual time=0.732..7.945 rows=29 loops=1)
                                                        Join Filter: (ml.linked_movie_id = t2.id)
                                                        ->  Nested Loop  (cost=38.06..5461.65 rows=47 width=22) (actual time=0.718..7.760 rows=47 loops=1)
                                                              ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..14.12 rows=1 width=4) (actual time=0.018..0.020 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                              ->  Nested Loop  (cost=37.91..5447.06 rows=47 width=18) (actual time=0.699..7.729 rows=47 loops=1)
                                                                    Join Filter: (mi_idx2.info_type_id = it2.id)
                                                                    Rows Removed by Join Filter: 3033
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=37.91..5406.14 rows=3080 width=22) (actual time=0.068..7.464 rows=3080 loops=1)
                                                                          ->  Nested Loop  (cost=37.49..612.73 rows=2315 width=8) (actual time=0.060..1.040 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=3 width=4) (actual time=0.002..0.006 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=37.49..185.08 rows=1875 width=12) (actual time=0.056..0.333 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..37.02 rows=1875 width=0) (actual time=0.043..0.043 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=14) (actual time=0.002..0.002 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.5'::text)
                                                                                Rows Removed by Filter: 1
                                                        ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.004..0.004 rows=1 loops=47)
                                                              Index Cond: (id = mi_idx2.movie_id)
                                                              Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                              Rows Removed by Filter: 0
                                                  ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=29)
                                                        ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.003..0.004 rows=2 loops=1)
                                                              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                              Rows Removed by Filter: 5
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..3.92 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=21)
                                                  Index Cond: (movie_id = ml.movie_id)
                                      ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=54)
                                            Index Cond: (id = mc1.company_id)
                                            Filter: ((country_code)::text <> '[us]'::text)
                                            Rows Removed by Filter: 0
                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=14) (actual time=0.002..0.002 rows=3 loops=49)
                                      Index Cond: (movie_id = mc1.movie_id)
                          ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=46)
                                Index Cond: (id = mc1.movie_id)
                    ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=46)
                          Index Cond: (id = t1.kind_id)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=46)
                    Index Cond: (movie_id = t2.id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 58.930 ms
Execution time: 9.119 ms
