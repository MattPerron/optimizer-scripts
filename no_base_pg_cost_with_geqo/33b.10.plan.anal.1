Aggregate  (cost=5153.46..5153.47 rows=1 width=192) (actual time=7.668..7.668 rows=1 loops=1)
  ->  Nested Loop  (cost=42.64..5153.44 rows=1 width=84) (actual time=0.766..7.658 rows=4 loops=1)
        Join Filter: ((ml.movie_id = t1.id) AND (kt1.id = t1.kind_id))
        ->  Nested Loop  (cost=42.21..5152.91 rows=1 width=83) (actual time=0.760..7.646 rows=4 loops=1)
              ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..12.26 rows=1 width=4) (actual time=0.006..0.007 rows=1 loops=1)
                    Filter: ((kind)::text = 'tv series'::text)
                    Rows Removed by Filter: 6
              ->  Nested Loop  (cost=42.08..5140.64 rows=1 width=79) (actual time=0.754..7.637 rows=4 loops=1)
                    ->  Nested Loop  (cost=41.66..5114.78 rows=58 width=64) (actual time=0.740..7.592 rows=14 loops=1)
                          Join Filter: (ml.movie_id = mc1.movie_id)
                          ->  Nested Loop  (cost=41.23..5110.85 rows=6 width=56) (actual time=0.735..7.567 rows=6 loops=1)
                                Join Filter: (it1.id = mi_idx1.info_type_id)
                                Rows Removed by Join Filter: 12
                                ->  Nested Loop  (cost=40.80..5098.37 rows=6 width=50) (actual time=0.729..7.546 rows=6 loops=1)
                                      ->  Nested Loop  (cost=40.38..5095.71 rows=6 width=35) (actual time=0.724..7.523 rows=6 loops=1)
                                            Join Filter: (t2.id = mc2.movie_id)
                                            ->  Nested Loop  (cost=39.95..5094.23 rows=2 width=43) (actual time=0.718..7.507 rows=2 loops=1)
                                                  ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..14.12 rows=1 width=4) (actual time=0.016..0.018 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                                  ->  Nested Loop  (cost=39.81..5080.09 rows=2 width=39) (actual time=0.702..7.487 rows=2 loops=1)
                                                        ->  Nested Loop  (cost=39.68..5079.77 rows=2 width=43) (actual time=0.700..7.480 rows=2 loops=1)
                                                              Join Filter: (ml.linked_movie_id = t2.id)
                                                              ->  Nested Loop  (cost=39.25..5054.71 rows=34 width=18) (actual time=0.693..7.350 rows=34 loops=1)
                                                                    Join Filter: (mi_idx2.info_type_id = it2.id)
                                                                    Rows Removed by Join Filter: 2910
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.010 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=39.25..5015.50 rows=2944 width=22) (actual time=0.070..7.102 rows=2944 loops=1)
                                                                          ->  Nested Loop  (cost=38.82..245.23 rows=2315 width=8) (actual time=0.063..0.996 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=4) (actual time=0.002..0.007 rows=2 loops=1)
                                                                                      Filter: ((link)::text ~~ '%follow%'::text)
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..225.26 rows=1875 width=12) (actual time=0.054..0.313 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.041..0.041 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=14) (actual time=0.002..0.002 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.0'::text)
                                                                                Rows Removed by Filter: 1
                                                              ->  Index Scan using title_pkey on title t2  (cost=0.43..0.72 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=34)
                                                                    Index Cond: (id = mi_idx2.movie_id)
                                                                    Filter: (production_year = 2007)
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=2)
                                                              Index Cond: (id = t2.kind_id)
                                                              Filter: ((kind)::text = 'tv series'::text)
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.005..0.007 rows=3 loops=2)
                                                  Index Cond: (movie_id = mi_idx2.movie_id)
                                      ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=6)
                                            Index Cond: (id = mc2.company_id)
                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..2.04 rows=3 width=14) (actual time=0.002..0.003 rows=3 loops=6)
                                      Index Cond: (movie_id = ml.movie_id)
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=6)
                                Index Cond: (movie_id = mi_idx1.movie_id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=14)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text = '[nl]'::text)
                          Rows Removed by Filter: 1
        ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=4)
              Index Cond: (id = mc1.movie_id)
Planning time: 61.549 ms
Execution time: 7.773 ms
