Aggregate  (cost=82015.00..82016.00 rows=1 width=192) (actual time=20.868..20.868 rows=1 loops=1)
  ->  Hash Join  (cost=67645.00..82015.00 rows=25 width=82) (actual time=17.230..20.856 rows=8 loops=1)
        Hash Cond: (t1.kind_id = kt1.id)
        ->  Nested Loop  (cost=67637.00..81879.00 rows=149 width=86) (actual time=17.215..20.839 rows=8 loops=1)
              ->  Nested Loop  (cost=67637.00..81545.00 rows=167 width=71) (actual time=17.211..20.819 rows=8 loops=1)
                    ->  Nested Loop  (cost=67637.00..80495.00 rows=70 width=79) (actual time=17.206..20.807 rows=2 loops=1)
                          ->  Hash Join  (cost=67637.00..80368.00 rows=63 width=83) (actual time=16.726..20.706 rows=96 loops=1)
                                Hash Cond: (mi_idx1.info_type_id = it1.id)
                                ->  Nested Loop  (cost=67523.00..79941.00 rows=316 width=87) (actual time=16.710..20.648 rows=288 loops=1)
                                      ->  Nested Loop  (cost=67523.00..77965.00 rows=988 width=72) (actual time=16.701..18.730 rows=1134 loops=1)
                                            ->  Nested Loop  (cost=67523.00..71110.00 rows=457 width=80) (actual time=16.693..17.861 rows=285 loops=1)
                                                  ->  Nested Loop  (cost=67523.00..70132.00 rows=489 width=55) (actual time=16.688..17.335 rows=285 loops=1)
                                                        ->  Merge Join  (cost=67523.00..67808.00 rows=332 width=42) (actual time=16.680..16.745 rows=213 loops=1)
                                                              Merge Cond: (kt2.id = t2.kind_id)
                                                              ->  Sort  (cost=7.00..7.00 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                                                    Sort Key: kt2.id
                                                                    Sort Method: quicksort  Memory: 25kB
                                                                    ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                                          Filter: ((kind)::text = 'tv series'::text)
                                                                          Rows Removed by Filter: 6
                                                              ->  Sort  (cost=67516.00..67516.00 rows=1995 width=46) (actual time=16.667..16.684 rows=235 loops=1)
                                                                    Sort Key: t2.kind_id
                                                                    Sort Method: quicksort  Memory: 97kB
                                                                    ->  Nested Loop  (cost=0.00..67516.00 rows=1995 width=46) (actual time=0.149..16.502 rows=630 loops=1)
                                                                          ->  Nested Loop  (cost=0.00..45018.00 rows=11249 width=21) (actual time=0.031..6.049 rows=6192 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..11268.00 rows=3750 width=8) (actual time=0.017..0.908 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.003..0.008 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.010..0.296 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=2315)
                                                                                      Index Cond: (movie_id = ml.movie_id)
                                                                          ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=6192)
                                                                                Index Cond: (id = ml.linked_movie_id)
                                                                                Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                                                Rows Removed by Filter: 1
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=1 width=13) (actual time=0.002..0.002 rows=1 loops=213)
                                                              Index Cond: (movie_id = t2.id)
                                                              Filter: (info < '3.0'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=285)
                                                        Index Cond: (id = ml.movie_id)
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=4 loops=285)
                                                  Index Cond: (movie_id = t1.id)
                                      ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=0 loops=1134)
                                            Index Cond: (id = mc1.company_id)
                                            Filter: ((country_code)::text = '[us]'::text)
                                            Rows Removed by Filter: 1
                                ->  Hash  (cost=113.00..113.00 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                      ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                            Filter: ((info)::text = 'rating'::text)
                                            Rows Removed by Filter: 112
                          ->  Index Scan using info_type_pkey on info_type it2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=96)
                                Index Cond: (id = mi_idx2.info_type_id)
                                Filter: ((info)::text = 'rating'::text)
                                Rows Removed by Filter: 1
                    ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=2)
                          Index Cond: (movie_id = t2.id)
              ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8)
                    Index Cond: (id = mc2.company_id)
        ->  Hash  (cost=7.00..7.00 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=1)
                    Filter: ((kind)::text = 'tv series'::text)
                    Rows Removed by Filter: 6
Planning time: 60.554 ms
Execution time: 20.982 ms
