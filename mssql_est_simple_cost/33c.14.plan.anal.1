Aggregate  (cost=133785.00..133786.00 rows=1 width=192) (actual time=151.108..151.108 rows=1 loops=1)
  ->  Hash Join  (cost=130492.00..133785.00 rows=65 width=82) (actual time=150.289..151.017 rows=114 loops=1)
        Hash Cond: (mi_idx1.info_type_id = it1.id)
        ->  Hash Join  (cost=130378.00..133350.00 rows=324 width=86) (actual time=150.258..150.950 rows=342 loops=1)
              Hash Cond: (t1.kind_id = kt1.id)
              ->  Nested Loop  (cost=130369.00..132509.00 rows=971 width=90) (actual time=150.248..150.874 rows=342 loops=1)
                    ->  Merge Join  (cost=130369.00..130415.00 rows=1047 width=81) (actual time=150.235..150.331 rows=342 loops=1)
                          Merge Cond: (mi_idx2.info_type_id = it2.id)
                          ->  Sort  (cost=130256.00..130256.00 rows=5234 width=85) (actual time=143.124..145.878 rows=60402 loops=1)
                                Sort Key: mi_idx2.info_type_id
                                Sort Method: quicksort  Memory: 11116kB
                                ->  Nested Loop  (cost=97698.00..130256.00 rows=5234 width=85) (actual time=31.968..124.830 rows=60402 loops=1)
                                      ->  Nested Loop  (cost=97698.00..114551.00 rows=1745 width=72) (actual time=31.963..79.801 rows=20335 loops=1)
                                            ->  Nested Loop  (cost=97698.00..110637.00 rows=1957 width=57) (actual time=31.959..47.046 rows=20335 loops=1)
                                                  ->  Merge Join  (cost=97698.00..98397.00 rows=816 width=65) (actual time=31.953..33.426 rows=4173 loops=1)
                                                        Merge Cond: (t2.kind_id = kt2.id)
                                                        ->  Sort  (cost=97691.00..97691.00 rows=2447 width=69) (actual time=31.908..32.252 rows=5038 loops=1)
                                                              Sort Key: t2.kind_id
                                                              Sort Method: quicksort  Memory: 918kB
                                                              ->  Nested Loop  (cost=0.00..97691.00 rows=2447 width=69) (actual time=0.046..30.370 rows=5038 loops=1)
                                                                    ->  Nested Loop  (cost=0.00..87517.00 rows=5087 width=54) (actual time=0.040..19.904 rows=5913 loops=1)
                                                                          ->  Nested Loop  (cost=0.00..52492.00 rows=2335 width=46) (actual time=0.035..15.388 rows=1318 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..41268.00 rows=5612 width=21) (actual time=0.027..8.117 rows=3080 loops=1)
                                                                                      ->  Nested Loop  (cost=0.00..11268.00 rows=3750 width=8) (actual time=0.018..1.003 rows=2315 loops=1)
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.003..0.008 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                                            ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.010..0.327 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                            Index Cond: (movie_id = ml.linked_movie_id)
                                                                                            Filter: (info < '3.5'::text)
                                                                                            Rows Removed by Filter: 1
                                                                                ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=3080)
                                                                                      Index Cond: (id = ml.linked_movie_id)
                                                                                      Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                                      Rows Removed by Filter: 1
                                                                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=1318)
                                                                                Index Cond: (movie_id = ml.movie_id)
                                                                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=5913)
                                                                          Index Cond: (id = mc1.company_id)
                                                                          Filter: ((country_code)::text <> '[us]'::text)
                                                                          Rows Removed by Filter: 0
                                                        ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.015..0.015 rows=2 loops=1)
                                                              Sort Key: kt2.id
                                                              Sort Method: quicksort  Memory: 25kB
                                                              ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=2 width=4) (actual time=0.008..0.009 rows=2 loops=1)
                                                                    Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                                    Rows Removed by Filter: 5
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.001..0.002 rows=5 loops=4173)
                                                        Index Cond: (movie_id = t2.id)
                                            ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=20335)
                                                  Index Cond: (id = mc2.company_id)
                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=20335)
                                            Index Cond: (movie_id = ml.movie_id)
                          ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.027..0.027 rows=1 loops=1)
                                Sort Key: it2.id
                                Sort Method: quicksort  Memory: 25kB
                                ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.017..0.018 rows=1 loops=1)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 112
                    ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=342)
                          Index Cond: (id = ml.movie_id)
              ->  Hash  (cost=7.00..7.00 rows=2 width=4) (actual time=0.005..0.005 rows=2 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=2 width=4) (actual time=0.003..0.004 rows=2 loops=1)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                          Rows Removed by Filter: 5
        ->  Hash  (cost=113.00..113.00 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=1)
                    Filter: ((info)::text = 'rating'::text)
                    Rows Removed by Filter: 112
Planning time: 58.017 ms
Execution time: 151.235 ms
