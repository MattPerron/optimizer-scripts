Aggregate  (cost=2030612.13..2030613.13 rows=1 width=32) (actual time=1452.205..1452.205 rows=1 loops=1)
  ->  Nested Loop  (cost=313082.00..2030612.13 rows=33 width=17) (actual time=350.832..1452.171 rows=33 loops=1)
        ->  Hash Join  (cost=313082.00..2030546.13 rows=33 width=21) (actual time=350.822..1452.012 rows=33 loops=1)
              Hash Cond: (cc.status_id = cct2.id)
              ->  Nested Loop  (cost=313076.00..2030515.13 rows=33 width=25) (actual time=350.808..1451.980 rows=33 loops=1)
                    ->  Nested Loop  (cost=313076.00..964897.00 rows=532809 width=29) (actual time=173.281..691.584 rows=532809 loops=1)
                          ->  Merge Join  (cost=313076.00..315169.00 rows=6016 width=33) (actual time=173.269..175.760 rows=6016 loops=1)
                                Merge Cond: (cc.subject_id = cct1.id)
                                ->  Sort  (cost=313072.00..313072.00 rows=8371 width=37) (actual time=173.259..174.101 rows=6017 loops=1)
                                      Sort Key: cc.subject_id
                                      Sort Method: quicksort  Memory: 1106kB
                                      ->  Nested Loop  (cost=212593.00..313072.00 rows=8371 width=37) (actual time=142.380..171.708 rows=8371 loops=1)
                                            ->  Merge Join  (cost=212593.00..217108.00 rows=15994 width=25) (actual time=142.339..146.536 rows=15994 loops=1)
                                                  Merge Cond: (t.kind_id = kt.id)
                                                  ->  Sort  (cost=212586.00..212586.00 rows=31607 width=29) (actual time=142.326..143.627 rows=15995 loops=1)
                                                        Sort Key: t.kind_id
                                                        Sort Method: quicksort  Memory: 3455kB
                                                        ->  Nested Loop  (cost=0.00..212586.00 rows=31607 width=29) (actual time=0.114..135.453 rows=31607 loops=1)
                                                              ->  Nested Loop  (cost=0.00..141490.00 rows=35548 width=4) (actual time=0.108..50.407 rows=35548 loops=1)
                                                                    ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=8 width=4) (actual time=0.092..23.656 rows=8 loops=1)
                                                                          Filter: (keyword = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                                                          Rows Removed by Filter: 134162
                                                                    ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.008..2.763 rows=4444 loops=8)
                                                                          Index Cond: (keyword_id = k.id)
                                                              ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=35548)
                                                                    Index Cond: (id = mk.movie_id)
                                                                    Filter: (production_year > 1950)
                                                                    Rows Removed by Filter: 0
                                                  ->  Sort  (cost=7.00..7.00 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                                        Sort Key: kt.id
                                                        Sort Method: quicksort  Memory: 25kB
                                                        ->  Seq Scan on kind_type kt  (cost=0.00..7.00 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                                              Filter: ((kind)::text = 'movie'::text)
                                                              Rows Removed by Filter: 6
                                            ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.00..4.00 rows=2 width=12) (actual time=0.001..0.001 rows=1 loops=15994)
                                                  Index Cond: (movie_id = t.id)
                                ->  Sort  (cost=4.00..4.00 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                      Sort Key: cct1.id
                                      Sort Method: quicksort  Memory: 25kB
                                      ->  Seq Scan on comp_cast_type cct1  (cost=0.00..4.00 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=1)
                                            Filter: ((kind)::text = 'cast'::text)
                                            Rows Removed by Filter: 3
                          ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.00..72.00 rows=36 width=12) (actual time=0.005..0.072 rows=89 loops=6016)
                                Index Cond: (movie_id = t.id)
                    ->  Index Scan using char_name_pkey on char_name chn  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=532809)
                          Index Cond: (id = ci.person_role_id)
                          Filter: ((name !~~ '%Sherlock%'::text) AND ((name ~~ '%Tony%Stark%'::text) OR (name ~~ '%Iron%Man%'::text)))
                          Rows Removed by Filter: 0
              ->  Hash  (cost=4.00..4.00 rows=2 width=4) (actual time=0.008..0.008 rows=2 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on comp_cast_type cct2  (cost=0.00..4.00 rows=2 width=4) (actual time=0.006..0.007 rows=2 loops=1)
                          Filter: ((kind)::text ~~ '%complete%'::text)
                          Rows Removed by Filter: 2
        ->  Index Only Scan using name_pkey on name n  (cost=0.00..2.00 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=33)
              Index Cond: (id = ci.person_id)
              Heap Fetches: 33
Planning time: 7.431 ms
Execution time: 1452.287 ms
