Aggregate  (cost=3063.75..3063.76 rows=1 width=192) (actual time=35.032..35.033 rows=1 loops=1)
  ->  Nested Loop  (cost=603.26..3063.73 rows=1 width=84) (actual time=5.670..35.014 rows=8 loops=1)
        ->  Nested Loop  (cost=602.84..3063.29 rows=1 width=69) (actual time=5.662..34.930 rows=28 loops=1)
              ->  Nested Loop  (cost=602.41..3062.68 rows=1 width=77) (actual time=5.657..34.881 rows=10 loops=1)
                    Join Filter: ((ml.movie_id = t1.id) AND (kt1.id = t1.kind_id))
                    ->  Nested Loop  (cost=601.98..3062.08 rows=1 width=60) (actual time=5.652..34.842 rows=10 loops=1)
                          ->  Nested Loop  (cost=601.98..3060.99 rows=1 width=56) (actual time=5.649..34.811 rows=10 loops=1)
                                ->  Nested Loop  (cost=601.84..3060.81 rows=1 width=60) (actual time=5.646..34.788 rows=10 loops=1)
                                      Join Filter: (ml.linked_movie_id = t2.id)
                                      ->  Nested Loop  (cost=601.41..3058.14 rows=5 width=51) (actual time=5.637..34.603 rows=58 loops=1)
                                            ->  Nested Loop  (cost=600.99..3055.93 rows=5 width=36) (actual time=5.632..34.368 rows=58 loops=1)
                                                  Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                                  ->  Nested Loop  (cost=600.56..3055.19 rows=1 width=28) (actual time=5.627..34.169 rows=30 loops=1)
                                                        Join Filter: (it2.id = mi_idx2.info_type_id)
                                                        Rows Removed by Join Filter: 2756
                                                        ->  Nested Loop  (cost=600.14..2929.34 rows=61 width=22) (actual time=1.559..24.773 rows=2064 loops=1)
                                                              ->  Nested Loop  (cost=600.14..2926.16 rows=61 width=18) (actual time=1.547..23.706 rows=2064 loops=1)
                                                                    Join Filter: (mi_idx1.info_type_id = it1.id)
                                                                    Rows Removed by Join Filter: 4128
                                                                    ->  Merge Join  (cost=600.14..2820.91 rows=6856 width=22) (actual time=1.524..21.247 rows=6192 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43810.54 rows=1380035 width=14) (actual time=0.009..10.874 rows=63901 loops=1)
                                                                          ->  Sort  (cost=599.67..605.46 rows=2315 width=8) (actual time=1.484..2.133 rows=6443 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Nested Loop  (cost=38.82..470.30 rows=2315 width=8) (actual time=0.080..0.998 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.005..0.010 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.073..0.316 rows=1158 loops=2)
                                                                                            Recheck Cond: (link_type_id = lt.id)
                                                                                            Heap Blocks: exact=191
                                                                                            ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.059..0.059 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                    ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=6192)
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.013..0.015 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                              ->  Materialize  (cost=0.00..2.42 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=2064)
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=14) (actual time=0.003..0.004 rows=1 loops=2064)
                                                              Index Cond: (movie_id = ml.linked_movie_id)
                                                              Filter: (info < '3.0'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.005..0.005 rows=2 loops=30)
                                                        Index Cond: (movie_id = mi_idx2.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=58)
                                                  Index Cond: (id = mc2.company_id)
                                      ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=58)
                                            Index Cond: (id = mc2.movie_id)
                                            Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                            Rows Removed by Filter: 1
                                ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=10)
                                      Index Cond: (id = t2.kind_id)
                                      Filter: ((kind)::text = 'tv series'::text)
                          ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=10)
                                Filter: ((kind)::text = 'tv series'::text)
                                Rows Removed by Filter: 6
                    ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=10)
                          Index Cond: (id = mi_idx1.movie_id)
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=10)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=28)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text = '[us]'::text)
              Rows Removed by Filter: 1
Planning time: 89.752 ms
Execution time: 35.155 ms
