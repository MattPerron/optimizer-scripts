Aggregate  (cost=5408.87..5408.88 rows=1 width=192) (actual time=12.827..12.827 rows=1 loops=1)
  ->  Nested Loop  (cost=42.37..5408.86 rows=1 width=84) (actual time=0.925..12.660 rows=114 loops=1)
        ->  Nested Loop  (cost=42.23..5408.69 rows=1 width=88) (actual time=0.921..12.455 rows=114 loops=1)
              Join Filter: (ml.movie_id = t1.id)
              ->  Nested Loop  (cost=41.80..5408.16 rows=1 width=79) (actual time=0.917..12.140 rows=114 loops=1)
                    ->  Nested Loop  (cost=41.38..5407.72 rows=1 width=64) (actual time=0.914..11.822 rows=114 loops=1)
                          ->  Nested Loop  (cost=40.95..5407.05 rows=1 width=72) (actual time=0.910..11.613 rows=46 loops=1)
                                Join Filter: (mi_idx1.info_type_id = it1.id)
                                Rows Removed by Join Filter: 92
                                ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.017 rows=1 loops=1)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 112
                                ->  Nested Loop  (cost=40.95..5403.97 rows=53 width=76) (actual time=0.865..11.567 rows=138 loops=1)
                                      ->  Nested Loop  (cost=40.53..5360.28 rows=98 width=61) (actual time=0.860..11.118 rows=153 loops=1)
                                            Join Filter: (ml.movie_id = mc1.movie_id)
                                            ->  Nested Loop  (cost=40.10..5350.45 rows=15 width=53) (actual time=0.855..10.857 rows=57 loops=1)
                                                  ->  Nested Loop  (cost=39.68..5340.08 rows=5 width=39) (actual time=0.850..10.765 rows=21 loops=1)
                                                        Join Filter: (t2.kind_id = kt2.id)
                                                        Rows Removed by Join Filter: 16
                                                        ->  Nested Loop  (cost=39.68..5338.45 rows=19 width=43) (actual time=0.843..10.733 rows=29 loops=1)
                                                              Join Filter: (ml.linked_movie_id = t2.id)
                                                              ->  Nested Loop  (cost=39.25..5304.63 rows=47 width=18) (actual time=0.829..10.553 rows=47 loops=1)
                                                                    Join Filter: (mi_idx2.info_type_id = it2.id)
                                                                    Rows Removed by Join Filter: 3033
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=39.25..5263.71 rows=3080 width=22) (actual time=0.086..10.186 rows=3080 loops=1)
                                                                          ->  Nested Loop  (cost=38.82..470.30 rows=2315 width=8) (actual time=0.079..1.153 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.002..0.007 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.073..0.371 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.058..0.058 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=14) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.5'::text)
                                                                                Rows Removed by Filter: 1
                                                              ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=47)
                                                                    Index Cond: (id = mi_idx2.movie_id)
                                                                    Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                    Rows Removed by Filter: 0
                                                        ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.001 rows=1 loops=29)
                                                              ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.004..0.006 rows=2 loops=1)
                                                                    Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                                    Rows Removed by Filter: 5
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..2.04 rows=3 width=14) (actual time=0.002..0.003 rows=3 loops=21)
                                                        Index Cond: (movie_id = ml.movie_id)
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.003 rows=3 loops=57)
                                                  Index Cond: (movie_id = mi_idx1.movie_id)
                                      ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=153)
                                            Index Cond: (id = mc1.company_id)
                                            Filter: ((country_code)::text <> '[us]'::text)
                                            Rows Removed by Filter: 0
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=46)
                                Index Cond: (movie_id = t2.id)
                    ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=114)
                          Index Cond: (id = mc2.company_id)
              ->  Index Scan using title_pkey on title t1  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=114)
                    Index Cond: (id = mc1.movie_id)
        ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=114)
              Index Cond: (id = t1.kind_id)
              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
Planning time: 87.448 ms
Execution time: 12.946 ms
