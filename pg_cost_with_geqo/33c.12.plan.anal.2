Aggregate  (cost=5626.48..5626.49 rows=1 width=192) (actual time=8.715..8.715 rows=1 loops=1)
  ->  Nested Loop  (cost=42.23..5626.12 rows=24 width=84) (actual time=0.769..8.647 rows=114 loops=1)
        ->  Nested Loop  (cost=41.81..5606.06 rows=45 width=69) (actual time=0.766..8.395 rows=131 loops=1)
              ->  Nested Loop  (cost=41.38..5579.28 rows=44 width=77) (actual time=0.763..8.253 rows=44 loops=1)
                    ->  Nested Loop  (cost=40.96..5559.77 rows=44 width=62) (actual time=0.759..8.152 rows=44 loops=1)
                          ->  Nested Loop  (cost=40.53..5547.10 rows=19 width=70) (actual time=0.753..8.063 rows=19 loops=1)
                                Join Filter: (t2.kind_id = kt2.id)
                                Rows Removed by Join Filter: 16
                                ->  Nested Loop  (cost=40.53..5545.23 rows=27 width=74) (actual time=0.752..8.047 rows=27 loops=1)
                                      Join Filter: (mi_idx1.info_type_id = it1.id)
                                      Rows Removed by Join Filter: 54
                                      ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                            Filter: ((info)::text = 'rating'::text)
                                            Rows Removed by Filter: 112
                                      ->  Nested Loop  (cost=40.53..5541.81 rows=81 width=78) (actual time=0.729..8.022 rows=81 loops=1)
                                            Join Filter: (kt1.id = t1.kind_id)
                                            ->  Nested Loop  (cost=40.53..5538.41 rows=81 width=82) (actual time=0.724..7.989 rows=81 loops=1)
                                                  Join Filter: (ml.movie_id = t1.id)
                                                  ->  Nested Loop  (cost=40.10..5490.58 rows=81 width=57) (actual time=0.720..7.816 rows=81 loops=1)
                                                        Join Filter: (ml.linked_movie_id = t2.id)
                                                        ->  Nested Loop  (cost=39.67..5402.06 rows=123 width=32) (actual time=0.688..7.524 rows=123 loops=1)
                                                              ->  Nested Loop  (cost=39.25..5304.63 rows=47 width=18) (actual time=0.686..7.383 rows=47 loops=1)
                                                                    Join Filter: (mi_idx2.info_type_id = it2.id)
                                                                    Rows Removed by Join Filter: 3033
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                                    ->  Nested Loop  (cost=39.25..5263.71 rows=3080 width=22) (actual time=0.069..7.133 rows=3080 loops=1)
                                                                          ->  Nested Loop  (cost=38.82..470.30 rows=2315 width=8) (actual time=0.060..0.970 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.002..0.005 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.052..0.311 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.040..0.040 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=14) (actual time=0.002..0.002 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.5'::text)
                                                                                Rows Removed by Filter: 1
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..2.04 rows=3 width=14) (actual time=0.002..0.002 rows=3 loops=47)
                                                                    Index Cond: (movie_id = ml.movie_id)
                                                        ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=123)
                                                              Index Cond: (id = mi_idx2.movie_id)
                                                              Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                              Rows Removed by Filter: 0
                                                  ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=81)
                                                        Index Cond: (id = mi_idx1.movie_id)
                                            ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=81)
                                                  ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                        Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                        Rows Removed by Filter: 1
                                ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=27)
                                      ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.001..0.003 rows=2 loops=1)
                                            Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                            Rows Removed by Filter: 5
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.003..0.003 rows=2 loops=19)
                                Index Cond: (movie_id = t2.id)
                    ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=44)
                          Index Cond: (id = mc2.company_id)
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.002 rows=3 loops=44)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text <> '[us]'::text)
              Rows Removed by Filter: 0
Planning time: 58.473 ms
Execution time: 8.809 ms
