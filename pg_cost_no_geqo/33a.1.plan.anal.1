Aggregate  (cost=3023.08..3023.09 rows=1 width=192) (actual time=29.700..29.700 rows=1 loops=1)
  ->  Nested Loop  (cost=674.83..3023.06 rows=1 width=84) (actual time=5.525..29.680 rows=8 loops=1)
        ->  Nested Loop  (cost=674.69..3022.89 rows=1 width=88) (actual time=5.516..29.661 rows=8 loops=1)
              ->  Nested Loop  (cost=674.27..3022.44 rows=1 width=73) (actual time=5.511..29.640 rows=8 loops=1)
                    ->  Nested Loop  (cost=673.85..3022.00 rows=1 width=58) (actual time=5.496..29.556 rows=28 loops=1)
                          ->  Nested Loop  (cost=673.42..3021.39 rows=1 width=66) (actual time=5.491..29.510 rows=10 loops=1)
                                Join Filter: (ml.linked_movie_id = t2.id)
                                ->  Nested Loop  (cost=672.99..3020.86 rows=1 width=57) (actual time=5.484..29.352 rows=54 loops=1)
                                      Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                      ->  Nested Loop  (cost=672.56..3020.12 rows=1 width=49) (actual time=5.474..29.192 rows=28 loops=1)
                                            Join Filter: (it2.id = mi_idx2.info_type_id)
                                            Rows Removed by Join Filter: 1581
                                            ->  Hash Join  (cost=672.14..2993.30 rows=13 width=43) (actual time=1.638..25.233 rows=1220 loops=1)
                                                  Hash Cond: (t1.kind_id = kt1.id)
                                                  ->  Nested Loop  (cost=671.04..2991.20 rows=88 width=47) (actual time=1.613..24.811 rows=2064 loops=1)
                                                        Join Filter: (ml.movie_id = t1.id)
                                                        ->  Hash Join  (cost=670.61..2939.25 rows=88 width=22) (actual time=1.603..20.729 rows=2064 loops=1)
                                                              Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                              ->  Merge Join  (cost=665.76..2896.27 rows=9934 width=22) (actual time=1.569..19.749 rows=6192 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43804.18 rows=1380035 width=14) (actual time=0.015..10.319 rows=63901 loops=1)
                                                                    ->  Sort  (cost=665.32..673.65 rows=3333 width=8) (actual time=1.525..2.035 rows=6443 loops=1)
                                                                          Sort Key: ml.movie_id
                                                                          Sort Method: quicksort  Memory: 205kB
                                                                          ->  Nested Loop  (cost=38.82..470.30 rows=3333 width=8) (actual time=0.071..1.024 rows=2315 loops=1)
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                                ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..215.78 rows=1875 width=12) (actual time=0.059..0.322 rows=1158 loops=2)
                                                                                      Recheck Cond: (link_type_id = lt.id)
                                                                                      Heap Blocks: exact=191
                                                                                      ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.045..0.045 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                              ->  Hash  (cost=4.83..4.83 rows=1 width=8) (actual time=0.022..0.022 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Nested Loop  (cost=0.00..4.83 rows=1 width=8) (actual time=0.017..0.019 rows=1 loops=1)
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                                          ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                        ->  Index Scan using title_pkey on title t1  (cost=0.43..0.58 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=2064)
                                                              Index Cond: (id = mi_idx1.movie_id)
                                                  ->  Hash  (cost=1.09..1.09 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                                        Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                        ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.008..0.010 rows=1 loops=1)
                                                              Filter: ((kind)::text = 'tv series'::text)
                                                              Rows Removed by Filter: 6
                                            ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=14) (actual time=0.002..0.003 rows=1 loops=1220)
                                                  Index Cond: (movie_id = ml.linked_movie_id)
                                                  Filter: (info < '3.0'::text)
                                                  Rows Removed by Filter: 1
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.004..0.005 rows=2 loops=28)
                                            Index Cond: (movie_id = mi_idx2.movie_id)
                                ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=54)
                                      Index Cond: (id = mc2.movie_id)
                                      Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                      Rows Removed by Filter: 1
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.004 rows=3 loops=10)
                                Index Cond: (movie_id = t1.id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=28)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text = '[us]'::text)
                          Rows Removed by Filter: 1
              ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8)
                    Index Cond: (id = mc2.company_id)
        ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=8)
              Index Cond: (id = t2.kind_id)
              Filter: ((kind)::text = 'tv series'::text)
Planning time: 266.174 ms
Execution time: 29.913 ms
