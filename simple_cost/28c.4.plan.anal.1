Aggregate  (cost=263158.80..263159.80 rows=1 width=96) (actual time=784.147..784.147 rows=1 loops=1)
  ->  Nested Loop  (cost=211114.00..263158.80 rows=1 width=41) (actual time=122.461..781.261 rows=8373 loops=1)
        ->  Nested Loop  (cost=211114.00..263154.80 rows=1 width=45) (actual time=122.296..771.373 rows=9489 loops=1)
              ->  Nested Loop  (cost=211114.00..263068.80 rows=1 width=61) (actual time=122.288..225.032 rows=8156 loops=1)
                    ->  Nested Loop  (cost=211114.00..263064.80 rows=1 width=65) (actual time=122.282..200.371 rows=24274 loops=1)
                          ->  Nested Loop  (cost=211114.00..263046.80 rows=2 width=52) (actual time=122.275..175.605 rows=8286 loops=1)
                                ->  Nested Loop  (cost=211114.00..263042.00 rows=2 width=56) (actual time=122.272..167.061 rows=8286 loops=1)
                                      ->  Nested Loop  (cost=211114.00..263036.00 rows=3 width=41) (actual time=122.266..148.131 rows=8705 loops=1)
                                            ->  Hash Join  (cost=211114.00..262739.00 rows=27 width=29) (actual time=122.241..136.896 rows=922 loops=1)
                                                  Hash Cond: (cc.subject_id = cct1.id)
                                                  ->  Hash Join  (cost=211109.00..262653.00 rows=108 width=33) (actual time=122.231..136.623 rows=1195 loops=1)
                                                        Hash Cond: (cc.status_id = cct2.id)
                                                        ->  Nested Loop  (cost=211104.00..262325.00 rows=431 width=37) (actual time=122.226..136.296 rows=1558 loops=1)
                                                              ->  Merge Join  (cost=211104.00..213887.00 rows=8073 width=25) (actual time=122.197..124.541 rows=8073 loops=1)
                                                                    Merge Cond: (t.kind_id = kt.id)
                                                                    ->  Sort  (cost=211097.00..211097.00 rows=9739 width=29) (actual time=122.184..122.878 rows=9739 loops=1)
                                                                          Sort Key: t.kind_id
                                                                          Sort Method: quicksort  Memory: 1168kB
                                                                          ->  Nested Loop  (cost=0.00..211097.00 rows=9739 width=29) (actual time=0.809..120.224 rows=9739 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..136915.00 rows=37091 width=4) (actual time=0.805..41.382 rows=37091 loops=1)
                                                                                      ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=3 width=4) (actual time=0.797..15.925 rows=3 loops=1)
                                                                                            Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                            Rows Removed by Filter: 134167
                                                                                      ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.006..6.975 rows=12364 loops=3)
                                                                                            Index Cond: (keyword_id = k.id)
                                                                                ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=37091)
                                                                                      Index Cond: (id = mk.movie_id)
                                                                                      Filter: (production_year > 2005)
                                                                                      Rows Removed by Filter: 1
                                                                    ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.011..0.011 rows=2 loops=1)
                                                                          Sort Key: kt.id
                                                                          Sort Method: quicksort  Memory: 25kB
                                                                          ->  Seq Scan on kind_type kt  (cost=0.00..7.00 rows=2 width=4) (actual time=0.004..0.005 rows=2 loops=1)
                                                                                Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                                                Rows Removed by Filter: 5
                                                              ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.00..4.00 rows=2 width=12) (actual time=0.001..0.001 rows=0 loops=8073)
                                                                    Index Cond: (movie_id = t.id)
                                                        ->  Hash  (cost=4.00..4.00 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on comp_cast_type cct2  (cost=0.00..4.00 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                                    Filter: ((kind)::text = 'complete'::text)
                                                                    Rows Removed by Filter: 3
                                                  ->  Hash  (cost=4.00..4.00 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=1)
                                                        Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                        ->  Seq Scan on comp_cast_type cct1  (cost=0.00..4.00 rows=1 width=4) (actual time=0.004..0.005 rows=1 loops=1)
                                                              Filter: ((kind)::text = 'cast'::text)
                                                              Rows Removed by Filter: 3
                                            ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.00..10.00 rows=1 width=12) (actual time=0.005..0.011 rows=9 loops=922)
                                                  Index Cond: (movie_id = t.id)
                                                  Filter: ((note !~~ '%(USA)%'::text) AND (note ~~ '%(200%)%'::text))
                                                  Rows Removed by Filter: 11
                                      ->  Index Scan using company_name_pkey on company_name cn  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8705)
                                            Index Cond: (id = mc.company_id)
                                            Filter: ((country_code)::text <> '[us]'::text)
                                            Rows Removed by Filter: 0
                                ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=8286)
                                      Index Cond: (id = mc.company_type_id)
                                      Heap Fetches: 8286
                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=8286)
                                Index Cond: (movie_id = t.id)
                                Filter: (info < '8.5'::text)
                                Rows Removed by Filter: 0
                    ->  Index Scan using info_type_pkey on info_type it2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=24274)
                          Index Cond: (id = mi_idx.info_type_id)
                          Filter: ((info)::text = 'rating'::text)
                          Rows Removed by Filter: 1
              ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.00..84.00 rows=2 width=8) (actual time=0.056..0.067 rows=1 loops=8156)
                    Index Cond: (movie_id = t.id)
                    Filter: (info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                    Rows Removed by Filter: 206
        ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=9489)
              Index Cond: (id = mi.info_type_id)
              Filter: ((info)::text = 'countries'::text)
              Rows Removed by Filter: 0
Planning time: 54.987 ms
Execution time: 784.228 ms
