Aggregate  (cost=79462.00..79463.00 rows=1 width=192) (actual time=34.557..34.557 rows=1 loops=1)
  ->  Nested Loop  (cost=57188.00..79462.00 rows=2 width=82) (actual time=22.703..34.484 rows=114 loops=1)
        ->  Nested Loop  (cost=57188.00..79450.00 rows=6 width=86) (actual time=21.566..34.352 rows=133 loops=1)
              ->  Nested Loop  (cost=57188.00..79438.00 rows=6 width=71) (actual time=21.563..34.114 rows=133 loops=1)
                    ->  Hash Join  (cost=57188.00..79348.00 rows=6 width=79) (actual time=21.559..33.939 rows=72 loops=1)
                          Hash Cond: (mi_idx2.info_type_id = it2.id)
                          ->  Nested Loop  (cost=57074.00..78554.00 rows=686 width=83) (actual time=20.935..33.526 rows=4939 loops=1)
                                ->  Nested Loop  (cost=57074.00..75998.00 rows=1278 width=68) (actual time=20.931..24.832 rows=5763 loops=1)
                                      ->  Merge Join  (cost=57074.00..57428.00 rows=1238 width=76) (actual time=20.927..21.276 rows=1238 loops=1)
                                            Merge Cond: (kt1.id = t1.kind_id)
                                            ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                  Sort Key: kt1.id
                                                  Sort Method: quicksort  Memory: 25kB
                                                  ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=2 width=4) (actual time=0.002..0.003 rows=2 loops=1)
                                                        Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                        Rows Removed by Filter: 5
                                            ->  Sort  (cost=57067.00..57067.00 rows=1238 width=80) (actual time=20.920..20.992 rows=1238 loops=1)
                                                  Sort Key: t1.kind_id
                                                  Sort Method: quicksort  Memory: 234kB
                                                  ->  Nested Loop  (cost=32216.00..57067.00 rows=1238 width=80) (actual time=7.019..20.480 rows=1238 loops=1)
                                                        ->  Nested Loop  (cost=32216.00..54591.00 rows=1238 width=55) (actual time=7.016..18.357 rows=1238 loops=1)
                                                              ->  Nested Loop  (cost=32216.00..48783.00 rows=2904 width=30) (actual time=7.012..12.897 rows=2904 loops=1)
                                                                    ->  Merge Join  (cost=32216.00..32271.00 rows=2064 width=17) (actual time=7.007..7.510 rows=2064 loops=1)
                                                                          Merge Cond: (it1.id = mi_idx1.info_type_id)
                                                                          ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                                                Sort Key: it1.id
                                                                                Sort Method: quicksort  Memory: 25kB
                                                                                ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                                                      Filter: ((info)::text = 'rating'::text)
                                                                                      Rows Removed by Filter: 112
                                                                          ->  Sort  (cost=32103.00..32103.00 rows=6192 width=21) (actual time=6.485..6.835 rows=6192 loops=1)
                                                                                Sort Key: mi_idx1.info_type_id
                                                                                Sort Method: quicksort  Memory: 676kB
                                                                                ->  Nested Loop  (cost=0.00..32103.00 rows=6192 width=21) (actual time=0.015..5.433 rows=6192 loops=1)
                                                                                      ->  Nested Loop  (cost=0.00..11268.00 rows=2315 width=8) (actual time=0.012..0.699 rows=2315 loops=1)
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.002..0.005 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                                            ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.007..0.201 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=2315)
                                                                                            Index Cond: (movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=2 width=13) (actual time=0.002..0.002 rows=1 loops=2064)
                                                                          Index Cond: (movie_id = ml.linked_movie_id)
                                                                          Filter: (info < '3.5'::text)
                                                                          Rows Removed by Filter: 1
                                                              ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2904)
                                                                    Index Cond: (id = ml.linked_movie_id)
                                                                    Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=1238)
                                                              Index Cond: (id = ml.movie_id)
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.001..0.002 rows=5 loops=1238)
                                            Index Cond: (movie_id = t1.id)
                                ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=5763)
                                      Index Cond: (id = mc1.company_id)
                                      Filter: ((country_code)::text <> '[us]'::text)
                                      Rows Removed by Filter: 0
                          ->  Hash  (cost=113.00..113.00 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 112
                    ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=2 loops=72)
                          Index Cond: (movie_id = t2.id)
              ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=133)
                    Index Cond: (id = mc2.company_id)
        ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=133)
              Index Cond: (id = t2.kind_id)
              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
              Rows Removed by Filter: 0
Planning time: 57.330 ms
Execution time: 34.641 ms
