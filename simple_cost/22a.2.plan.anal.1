Aggregate  (cost=239182.20..239183.20 rows=1 width=96) (actual time=289.728..289.728 rows=1 loops=1)
  ->  Nested Loop  (cost=238967.00..239182.20 rows=1 width=41) (actual time=140.287..288.734 rows=2851 loops=1)
        ->  Nested Loop  (cost=238967.00..239178.20 rows=1 width=45) (actual time=140.283..285.688 rows=3042 loops=1)
              ->  Nested Loop  (cost=238967.00..239092.20 rows=1 width=57) (actual time=140.251..170.347 rows=2958 loops=1)
                    ->  Nested Loop  (cost=238967.00..239090.20 rows=1 width=42) (actual time=140.245..162.822 rows=3374 loops=1)
                          ->  Nested Loop  (cost=238967.00..239085.00 rows=3 width=46) (actual time=140.241..159.565 rows=3374 loops=1)
                                ->  Merge Join  (cost=238967.00..239030.00 rows=5 width=34) (actual time=140.226..141.006 rows=2378 loops=1)
                                      Merge Cond: (mi_idx.info_type_id = it2.id)
                                      ->  Sort  (cost=238854.00..238854.00 rows=7074 width=38) (actual time=139.340..139.991 rows=8674 loops=1)
                                            Sort Key: mi_idx.info_type_id
                                            Sort Method: quicksort  Memory: 1133kB
                                            ->  Nested Loop  (cost=211104.00..238854.00 rows=7074 width=38) (actual time=121.395..137.383 rows=8699 loops=1)
                                                  ->  Merge Join  (cost=211104.00..213879.00 rows=2775 width=25) (actual time=121.388..122.820 rows=4832 loops=1)
                                                        Merge Cond: (t.kind_id = kt.id)
                                                        ->  Sort  (cost=211097.00..211097.00 rows=9713 width=29) (actual time=121.375..121.816 rows=5606 loops=1)
                                                              Sort Key: t.kind_id
                                                              Sort Method: quicksort  Memory: 643kB
                                                              ->  Nested Loop  (cost=0.00..211097.00 rows=9713 width=29) (actual time=0.826..120.139 rows=5606 loops=1)
                                                                    ->  Nested Loop  (cost=0.00..136915.00 rows=37091 width=4) (actual time=0.813..41.663 rows=37091 loops=1)
                                                                          ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=3 width=4) (actual time=0.804..15.304 rows=3 loops=1)
                                                                                Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                Rows Removed by Filter: 134167
                                                                          ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.007..7.313 rows=12364 loops=3)
                                                                                Index Cond: (keyword_id = k.id)
                                                                    ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=37091)
                                                                          Index Cond: (id = mk.movie_id)
                                                                          Filter: (production_year > 2008)
                                                                          Rows Removed by Filter: 1
                                                        ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.011..0.011 rows=2 loops=1)
                                                              Sort Key: kt.id
                                                              Sort Method: quicksort  Memory: 25kB
                                                              ->  Seq Scan on kind_type kt  (cost=0.00..7.00 rows=2 width=4) (actual time=0.005..0.006 rows=2 loops=1)
                                                                    Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                                    Rows Removed by Filter: 5
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.003 rows=2 loops=4832)
                                                        Index Cond: (movie_id = t.id)
                                                        Filter: (info < '7.0'::text)
                                                        Rows Removed by Filter: 0
                                      ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=1)
                                            Sort Key: it2.id
                                            Sort Method: quicksort  Memory: 25kB
                                            ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                                  Filter: ((info)::text = 'rating'::text)
                                                  Rows Removed by Filter: 112
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.00..10.00 rows=1 width=12) (actual time=0.006..0.007 rows=1 loops=2378)
                                      Index Cond: (movie_id = t.id)
                                      Filter: ((note !~~ '%(USA)%'::text) AND (note ~~ '%(200%)%'::text))
                                      Rows Removed by Filter: 10
                          ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=3374)
                                Index Cond: (id = mc.company_type_id)
                                Heap Fetches: 3374
                    ->  Index Scan using company_name_pkey on company_name cn  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=3374)
                          Index Cond: (id = mc.company_id)
                          Filter: ((country_code)::text <> '[us]'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.00..84.00 rows=2 width=8) (actual time=0.035..0.039 rows=1 loops=2958)
                    Index Cond: (movie_id = t.id)
                    Filter: (info = ANY ('{Germany,German,USA,American}'::text[]))
                    Rows Removed by Filter: 155
        ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=3042)
              Index Cond: (id = mi.info_type_id)
              Filter: ((info)::text = 'countries'::text)
              Rows Removed by Filter: 0
Planning time: 18.561 ms
Execution time: 289.807 ms
