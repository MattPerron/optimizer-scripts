Aggregate  (cost=34954.00..34955.00 rows=1 width=192) (actual time=12.848..12.848 rows=1 loops=1)
  ->  Nested Loop  (cost=33490.00..34954.00 rows=1 width=82) (actual time=12.618..12.841 rows=8 loops=1)
        ->  Hash Join  (cost=33490.00..34944.00 rows=4 width=86) (actual time=12.508..12.817 rows=24 loops=1)
              Hash Cond: (t1.kind_id = kt1.id)
              ->  Nested Loop  (cost=33482.00..34910.00 rows=30 width=90) (actual time=12.499..12.803 rows=24 loops=1)
                    ->  Nested Loop  (cost=33482.00..34742.00 rows=84 width=75) (actual time=12.294..12.660 rows=84 loops=1)
                          ->  Nested Loop  (cost=33482.00..34292.00 rows=30 width=83) (actual time=12.291..12.583 rows=30 loops=1)
                                ->  Nested Loop  (cost=33482.00..34232.00 rows=30 width=68) (actual time=12.288..12.528 rows=30 loops=1)
                                      ->  Hash Join  (cost=33482.00..34007.00 rows=15 width=76) (actual time=12.285..12.475 rows=15 loops=1)
                                            Hash Cond: (t2.kind_id = kt2.id)
                                            ->  Nested Loop  (cost=33474.00..33986.00 rows=15 width=80) (actual time=12.280..12.467 rows=15 loops=1)
                                                  ->  Nested Loop  (cost=33474.00..33806.00 rows=90 width=55) (actual time=12.217..12.311 rows=90 loops=1)
                                                        ->  Merge Join  (cost=33474.00..33500.00 rows=34 width=42) (actual time=12.214..12.223 rows=34 loops=1)
                                                              Merge Cond: (mi_idx2.info_type_id = it2.id)
                                                              ->  Sort  (cost=33361.00..33361.00 rows=2944 width=46) (actual time=11.837..11.984 rows=2944 loops=1)
                                                                    Sort Key: mi_idx2.info_type_id
                                                                    Sort Method: quicksort  Memory: 453kB
                                                                    ->  Nested Loop  (cost=0.00..33361.00 rows=2944 width=46) (actual time=0.020..11.171 rows=2944 loops=1)
                                                                          ->  Nested Loop  (cost=0.00..27473.00 rows=2944 width=21) (actual time=0.017..6.421 rows=2944 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..11268.00 rows=2315 width=8) (actual time=0.012..0.727 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.002..0.006 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.008..0.212 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=1 width=13) (actual time=0.002..0.002 rows=1 loops=2315)
                                                                                      Index Cond: (movie_id = ml.linked_movie_id)
                                                                                      Filter: (info < '3.0'::text)
                                                                                      Rows Removed by Filter: 1
                                                                          ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=2944)
                                                                                Index Cond: (id = ml.movie_id)
                                                              ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                                                    Sort Key: it2.id
                                                                    Sort Method: quicksort  Memory: 25kB
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=34)
                                                              Index Cond: (movie_id = t1.id)
                                                  ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=90)
                                                        Index Cond: (id = ml.linked_movie_id)
                                                        Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                        Rows Removed by Filter: 1
                                            ->  Hash  (cost=7.00..7.00 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                        Filter: ((kind)::text = 'tv series'::text)
                                                        Rows Removed by Filter: 6
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=2 loops=15)
                                            Index Cond: (movie_id = t2.id)
                                ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=30)
                                      Index Cond: (id = mc2.company_id)
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.001..0.002 rows=3 loops=30)
                                Index Cond: (movie_id = t1.id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=84)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text = '[us]'::text)
                          Rows Removed by Filter: 1
              ->  Hash  (cost=7.00..7.00 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=1)
                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                    ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=1 width=4) (actual time=0.004..0.005 rows=1 loops=1)
                          Filter: ((kind)::text = 'tv series'::text)
                          Rows Removed by Filter: 6
        ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=24)
              Index Cond: (id = mi_idx1.info_type_id)
              Filter: ((info)::text = 'rating'::text)
              Rows Removed by Filter: 1
Planning time: 60.175 ms
Execution time: 12.929 ms
