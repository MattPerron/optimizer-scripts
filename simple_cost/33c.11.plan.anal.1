Aggregate  (cost=34186.00..34187.00 rows=1 width=192) (actual time=13.115..13.115 rows=1 loops=1)
  ->  Nested Loop  (cost=33198.00..34186.00 rows=22 width=82) (actual time=12.488..13.037 rows=114 loops=1)
        ->  Nested Loop  (cost=33198.00..34142.00 rows=22 width=67) (actual time=12.485..12.845 rows=114 loops=1)
              ->  Hash Join  (cost=33198.00..33827.00 rows=21 width=75) (actual time=12.482..12.720 rows=46 loops=1)
                    Hash Cond: (t2.kind_id = kt2.id)
                    ->  Nested Loop  (cost=33189.00..33756.00 rows=72 width=79) (actual time=12.471..12.696 rows=72 loops=1)
                          ->  Nested Loop  (cost=33189.00..33602.00 rows=77 width=64) (actual time=12.467..12.553 rows=77 loops=1)
                                ->  Merge Join  (cost=33189.00..33197.00 rows=27 width=72) (actual time=12.464..12.472 rows=27 loops=1)
                                      Merge Cond: (t1.kind_id = kt1.id)
                                      ->  Sort  (cost=33182.00..33182.00 rows=27 width=76) (actual time=12.457..12.459 rows=27 loops=1)
                                            Sort Key: t1.kind_id
                                            Sort Method: quicksort  Memory: 28kB
                                            ->  Merge Join  (cost=33171.00..33182.00 rows=27 width=76) (actual time=12.441..12.448 rows=27 loops=1)
                                                  Merge Cond: (mi_idx2.info_type_id = it2.id)
                                                  ->  Sort  (cost=33058.00..33058.00 rows=1238 width=80) (actual time=12.238..12.300 rows=1238 loops=1)
                                                        Sort Key: mi_idx2.info_type_id
                                                        Sort Method: quicksort  Memory: 234kB
                                                        ->  Nested Loop  (cost=24525.00..33058.00 rows=1238 width=80) (actual time=7.949..11.811 rows=1238 loops=1)
                                                              ->  Nested Loop  (cost=24525.00..26250.00 rows=851 width=67) (actual time=7.946..9.655 rows=851 loops=1)
                                                                    ->  Merge Join  (cost=24525.00..24548.00 rows=851 width=42) (actual time=7.943..8.160 rows=851 loops=1)
                                                                          Merge Cond: (it1.id = mi_idx1.info_type_id)
                                                                          ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                                                Sort Key: it1.id
                                                                                Sort Method: quicksort  Memory: 25kB
                                                                                ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                      Filter: ((info)::text = 'rating'::text)
                                                                                      Rows Removed by Filter: 112
                                                                          ->  Sort  (cost=24412.00..24412.00 rows=2553 width=46) (actual time=7.699..7.840 rows=2553 loops=1)
                                                                                Sort Key: mi_idx1.info_type_id
                                                                                Sort Method: quicksort  Memory: 382kB
                                                                                ->  Nested Loop  (cost=0.00..24412.00 rows=2553 width=46) (actual time=0.019..7.093 rows=2553 loops=1)
                                                                                      ->  Nested Loop  (cost=0.00..15898.00 rows=946 width=33) (actual time=0.016..4.963 rows=946 loops=1)
                                                                                            ->  Nested Loop  (cost=0.00..11268.00 rows=2315 width=8) (actual time=0.012..0.719 rows=2315 loops=1)
                                                                                                  ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.002..0.005 rows=2 loops=1)
                                                                                                        Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                        Rows Removed by Filter: 16
                                                                                                  ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.007..0.211 rows=1158 loops=2)
                                                                                                        Index Cond: (link_type_id = lt.id)
                                                                                            ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2315)
                                                                                                  Index Cond: (id = ml.linked_movie_id)
                                                                                                  Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                                                  Rows Removed by Filter: 1
                                                                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=946)
                                                                                            Index Cond: (movie_id = ml.movie_id)
                                                                    ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=851)
                                                                          Index Cond: (id = ml.movie_id)
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=2 width=13) (actual time=0.002..0.002 rows=1 loops=851)
                                                                    Index Cond: (movie_id = t2.id)
                                                                    Filter: (info < '3.5'::text)
                                                                    Rows Removed by Filter: 1
                                                  ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                                        Sort Key: it2.id
                                                        Sort Method: quicksort  Memory: 25kB
                                                        ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                              Filter: ((info)::text = 'rating'::text)
                                                              Rows Removed by Filter: 112
                                      ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.005..0.005 rows=1 loops=1)
                                            Sort Key: kt1.id
                                            Sort Method: quicksort  Memory: 25kB
                                            ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=2 width=4) (actual time=0.003..0.004 rows=2 loops=1)
                                                  Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                  Rows Removed by Filter: 5
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=3 loops=27)
                                      Index Cond: (movie_id = t1.id)
                          ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=77)
                                Index Cond: (id = mc1.company_id)
                                Filter: ((country_code)::text <> '[us]'::text)
                                Rows Removed by Filter: 0
                    ->  Hash  (cost=7.00..7.00 rows=2 width=4) (actual time=0.007..0.007 rows=2 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=2 width=4) (actual time=0.005..0.006 rows=2 loops=1)
                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                Rows Removed by Filter: 5
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=2 loops=46)
                    Index Cond: (movie_id = t2.id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 57.242 ms
Execution time: 13.201 ms
