Aggregate  (cost=300556.00..300557.00 rows=1 width=96) (actual time=143.595..143.595 rows=1 loops=1)
  ->  Nested Loop  (cost=5.00..300556.00 rows=98 width=41) (actual time=1.334..143.537 rows=148 loops=1)
        ->  Nested Loop  (cost=5.00..300312.00 rows=130 width=45) (actual time=1.333..143.300 rows=240 loops=1)
              ->  Nested Loop  (cost=5.00..299828.00 rows=242 width=30) (actual time=1.329..142.719 rows=242 loops=1)
                    ->  Nested Loop  (cost=5.00..299392.00 rows=242 width=34) (actual time=1.327..142.462 rows=242 loops=1)
                          ->  Nested Loop  (cost=5.00..299205.00 rows=17 width=46) (actual time=1.321..142.160 rows=17 loops=1)
                                ->  Nested Loop  (cost=5.00..299165.00 rows=19 width=50) (actual time=1.319..142.130 rows=19 loops=1)
                                      ->  Nested Loop  (cost=5.00..299113.00 rows=26 width=54) (actual time=1.317..142.078 rows=26 loops=1)
                                            ->  Nested Loop  (cost=5.00..298903.00 rows=30 width=41) (actual time=1.311..141.921 rows=30 loops=1)
                                                  ->  Nested Loop  (cost=5.00..298793.00 rows=54 width=45) (actual time=1.309..141.832 rows=54 loops=1)
                                                        ->  Hash Join  (cost=5.00..270828.00 rows=329 width=37) (actual time=1.050..131.011 rows=329 loops=1)
                                                              Hash Cond: (cc.subject_id = cct1.id)
                                                              ->  Nested Loop  (cost=0.00..269531.00 rows=1723 width=41) (actual time=1.040..130.768 rows=1723 loops=1)
                                                                    ->  Nested Loop  (cost=0.00..211097.00 rows=9739 width=29) (actual time=0.788..116.314 rows=9739 loops=1)
                                                                          ->  Nested Loop  (cost=0.00..136915.00 rows=37091 width=4) (actual time=0.784..39.732 rows=37091 loops=1)
                                                                                ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=3 width=4) (actual time=0.778..15.886 rows=3 loops=1)
                                                                                      Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                      Rows Removed by Filter: 134167
                                                                                ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.006..6.544 rows=12364 loops=3)
                                                                                      Index Cond: (keyword_id = k.id)
                                                                          ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=37091)
                                                                                Index Cond: (id = mk.movie_id)
                                                                                Filter: (production_year > 2005)
                                                                                Rows Removed by Filter: 1
                                                                    ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.00..4.00 rows=2 width=12) (actual time=0.001..0.001 rows=0 loops=9739)
                                                                          Index Cond: (movie_id = t.id)
                                                              ->  Hash  (cost=4.00..4.00 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on comp_cast_type cct1  (cost=0.00..4.00 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                                          Filter: ((kind)::text = 'crew'::text)
                                                                          Rows Removed by Filter: 3
                                                        ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.00..84.00 rows=1 width=8) (actual time=0.030..0.033 rows=0 loops=329)
                                                              Index Cond: (movie_id = t.id)
                                                              Filter: (info = ANY ('{Sweden,Germany,Swedish,German}'::text[]))
                                                              Rows Removed by Filter: 102
                                                  ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=54)
                                                        Index Cond: (id = mi.info_type_id)
                                                        Filter: ((info)::text = 'countries'::text)
                                                        Rows Removed by Filter: 0
                                            ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.00..6.00 rows=1 width=13) (actual time=0.004..0.005 rows=1 loops=30)
                                                  Index Cond: (movie_id = t.id)
                                                  Filter: (info > '6.5'::text)
                                                  Rows Removed by Filter: 2
                                      ->  Index Scan using kind_type_pkey on kind_type kt  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=26)
                                            Index Cond: (id = t.kind_id)
                                            Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                            Rows Removed by Filter: 0
                                ->  Index Scan using info_type_pkey on info_type it2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=19)
                                      Index Cond: (id = mi_idx.info_type_id)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 0
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.00..10.00 rows=1 width=12) (actual time=0.005..0.016 rows=14 loops=17)
                                Index Cond: (movie_id = t.id)
                                Filter: ((note !~~ '%(USA)%'::text) AND (note ~~ '%(200%)%'::text))
                                Rows Removed by Filter: 17
                    ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=242)
                          Index Cond: (id = mc.company_type_id)
                          Heap Fetches: 242
              ->  Index Scan using company_name_pkey on company_name cn  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=242)
                    Index Cond: (id = mc.company_id)
                    Filter: ((country_code)::text <> '[us]'::text)
                    Rows Removed by Filter: 0
        ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=240)
              Index Cond: (id = cc.status_id)
              Filter: ((kind)::text <> 'complete+verified'::text)
              Rows Removed by Filter: 0
Planning time: 54.439 ms
Execution time: 143.675 ms
