Aggregate  (cost=37479.00..37480.00 rows=1 width=192) (actual time=9.635..9.635 rows=1 loops=1)
  ->  Hash Join  (cost=30033.00..37479.00 rows=63 width=82) (actual time=7.285..9.562 rows=114 loops=1)
        Hash Cond: (t2.kind_id = kt2.id)
        ->  Nested Loop  (cost=30024.00..37281.00 rows=221 width=86) (actual time=7.275..9.526 rows=133 loops=1)
              ->  Nested Loop  (cost=30024.00..36209.00 rows=536 width=77) (actual time=7.238..9.161 rows=218 loops=1)
                    ->  Nested Loop  (cost=30024.00..35137.00 rows=536 width=62) (actual time=7.236..8.777 rows=218 loops=1)
                          ->  Hash Join  (cost=30024.00..33772.00 rows=91 width=54) (actual time=7.234..8.514 rows=91 loops=1)
                                Hash Cond: (mi_idx1.info_type_id = it1.id)
                                ->  Hash Join  (cost=29910.00..33387.00 rows=273 width=58) (actual time=7.201..8.465 rows=273 loops=1)
                                      Hash Cond: (t1.kind_id = kt1.id)
                                      ->  Nested Loop  (cost=29901.00..33144.00 rows=273 width=62) (actual time=7.196..8.403 rows=273 loops=1)
                                            ->  Nested Loop  (cost=29901.00..32442.00 rows=351 width=47) (actual time=7.128..7.810 rows=351 loops=1)
                                                  ->  Nested Loop  (cost=29901.00..30597.00 rows=123 width=55) (actual time=7.124..7.480 rows=123 loops=1)
                                                        ->  Nested Loop  (cost=29901.00..30351.00 rows=123 width=30) (actual time=7.121..7.256 rows=123 loops=1)
                                                              ->  Merge Join  (cost=29901.00..29928.00 rows=47 width=17) (actual time=7.117..7.130 rows=47 loops=1)
                                                                    Merge Cond: (it2.id = mi_idx2.info_type_id)
                                                                    ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                                          Sort Key: it2.id
                                                                          Sort Method: quicksort  Memory: 25kB
                                                                          ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                                    ->  Sort  (cost=29788.00..29788.00 rows=3080 width=21) (actual time=6.729..6.883 rows=3080 loops=1)
                                                                          Sort Key: mi_idx2.info_type_id
                                                                          Sort Method: quicksort  Memory: 337kB
                                                                          ->  Nested Loop  (cost=0.00..29788.00 rows=3080 width=21) (actual time=0.016..6.149 rows=3080 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..11268.00 rows=2315 width=8) (actual time=0.011..0.690 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.002..0.005 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.007..0.207 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=2 width=13) (actual time=0.002..0.002 rows=1 loops=2315)
                                                                                      Index Cond: (movie_id = ml.linked_movie_id)
                                                                                      Filter: (info < '3.5'::text)
                                                                                      Rows Removed by Filter: 1
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=47)
                                                                    Index Cond: (movie_id = ml.movie_id)
                                                        ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=123)
                                                              Index Cond: (id = ml.movie_id)
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.001..0.002 rows=3 loops=123)
                                                        Index Cond: (movie_id = t1.id)
                                            ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=351)
                                                  Index Cond: (id = mc1.company_id)
                                                  Filter: ((country_code)::text <> '[us]'::text)
                                                  Rows Removed by Filter: 0
                                      ->  Hash  (cost=7.00..7.00 rows=2 width=4) (actual time=0.003..0.003 rows=2 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=2 width=4) (actual time=0.002..0.002 rows=2 loops=1)
                                                  Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                  Rows Removed by Filter: 5
                                ->  Hash  (cost=113.00..113.00 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                      ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                            Filter: ((info)::text = 'rating'::text)
                                            Rows Removed by Filter: 112
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=2 loops=91)
                                Index Cond: (movie_id = ml.linked_movie_id)
                    ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=218)
                          Index Cond: (id = mc2.company_id)
              ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=218)
                    Index Cond: (id = ml.linked_movie_id)
                    Filter: ((production_year >= 2000) AND (production_year <= 2010))
                    Rows Removed by Filter: 0
        ->  Hash  (cost=7.00..7.00 rows=2 width=4) (actual time=0.007..0.007 rows=2 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=2 width=4) (actual time=0.005..0.006 rows=2 loops=1)
                    Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                    Rows Removed by Filter: 5
Planning time: 57.802 ms
Execution time: 9.714 ms
