Aggregate  (cost=38194.33..38195.33 rows=1 width=192) (actual time=29.111..29.111 rows=1 loops=1)
  ->  Nested Loop  (cost=37608.00..38194.33 rows=1 width=82) (actual time=22.244..29.040 rows=114 loops=1)
        ->  Nested Loop  (cost=37608.00..38192.33 rows=1 width=67) (actual time=22.241..28.807 rows=131 loops=1)
              ->  Nested Loop  (cost=37608.00..38177.33 rows=1 width=75) (actual time=22.239..28.682 rows=44 loops=1)
                    ->  Nested Loop  (cost=37608.00..38174.00 rows=1 width=79) (actual time=22.236..28.632 rows=44 loops=1)
                          ->  Nested Loop  (cost=37608.00..38114.00 rows=29 width=83) (actual time=14.837..24.811 rows=4314 loops=1)
                                ->  Nested Loop  (cost=37608.00..38056.00 rows=29 width=68) (actual time=14.833..18.200 rows=4314 loops=1)
                                      ->  Merge Join  (cost=37608.00..37636.00 rows=28 width=76) (actual time=14.830..15.142 rows=1064 loops=1)
                                            Merge Cond: (it1.id = mi_idx1.info_type_id)
                                            ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=1)
                                                  Sort Key: it1.id
                                                  Sort Method: quicksort  Memory: 25kB
                                                  ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.011..0.012 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                            ->  Sort  (cost=37495.00..37495.00 rows=3192 width=80) (actual time=14.484..14.659 rows=3192 loops=1)
                                                  Sort Key: mi_idx1.info_type_id
                                                  Sort Method: quicksort  Memory: 578kB
                                                  ->  Nested Loop  (cost=20535.00..37495.00 rows=3192 width=80) (actual time=8.866..13.458 rows=3192 loops=1)
                                                        ->  Nested Loop  (cost=20535.00..27325.00 rows=1130 width=67) (actual time=8.864..11.008 rows=1130 loops=1)
                                                              ->  Merge Join  (cost=20535.00..20805.00 rows=815 width=54) (actual time=8.858..9.087 rows=815 loops=1)
                                                                    Merge Cond: (kt2.id = t2.kind_id)
                                                                    ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.004..0.005 rows=2 loops=1)
                                                                          Sort Key: kt2.id
                                                                          Sort Method: quicksort  Memory: 25kB
                                                                          ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=2 width=4) (actual time=0.002..0.003 rows=2 loops=1)
                                                                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                                                Rows Removed by Filter: 5
                                                                    ->  Sort  (cost=20528.00..20528.00 rows=946 width=58) (actual time=8.848..8.900 rows=946 loops=1)
                                                                          Sort Key: t2.kind_id
                                                                          Sort Method: quicksort  Memory: 156kB
                                                                          ->  Nested Loop  (cost=0.00..20528.00 rows=946 width=58) (actual time=0.019..8.592 rows=946 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..15898.00 rows=2315 width=33) (actual time=0.015..4.393 rows=2315 loops=1)
                                                                                      ->  Nested Loop  (cost=0.00..11268.00 rows=2315 width=8) (actual time=0.012..0.721 rows=2315 loops=1)
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.002..0.005 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                                            ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.008..0.218 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                                      ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=2315)
                                                                                            Index Cond: (id = ml.movie_id)
                                                                                ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2315)
                                                                                      Index Cond: (id = ml.linked_movie_id)
                                                                                      Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                                      Rows Removed by Filter: 1
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=2 width=13) (actual time=0.001..0.002 rows=1 loops=815)
                                                                    Index Cond: (movie_id = t2.id)
                                                                    Filter: (info < '3.5'::text)
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=1130)
                                                              Index Cond: (movie_id = t1.id)
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.001..0.002 rows=4 loops=1064)
                                            Index Cond: (movie_id = t2.id)
                                ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=4314)
                                      Index Cond: (id = mc2.company_id)
                          ->  Index Scan using info_type_pkey on info_type it2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=4314)
                                Index Cond: (id = mi_idx2.info_type_id)
                                Filter: ((info)::text = 'rating'::text)
                                Rows Removed by Filter: 1
                    ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=44)
                          Index Cond: (id = t1.kind_id)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=3 loops=44)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text <> '[us]'::text)
              Rows Removed by Filter: 0
Planning time: 57.687 ms
Execution time: 29.195 ms
