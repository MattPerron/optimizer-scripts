Aggregate  (cost=233768.20..233769.20 rows=1 width=96) (actual time=139.889..139.889 rows=1 loops=1)
  ->  Nested Loop  (cost=233577.00..233768.20 rows=1 width=41) (actual time=127.231..139.868 rows=31 loops=1)
        ->  Nested Loop  (cost=233577.00..233764.20 rows=1 width=45) (actual time=127.229..139.827 rows=34 loops=1)
              ->  Nested Loop  (cost=233577.00..233678.20 rows=1 width=57) (actual time=127.046..138.721 rows=50 loops=1)
                    ->  Nested Loop  (cost=233577.00..233676.20 rows=1 width=42) (actual time=126.909..138.500 rows=78 loops=1)
                          ->  Nested Loop  (cost=233577.00..233671.00 rows=3 width=46) (actual time=126.905..138.415 rows=78 loops=1)
                                ->  Merge Join  (cost=233577.00..233627.00 rows=4 width=34) (actual time=126.835..127.312 rows=1615 loops=1)
                                      Merge Cond: (mi_idx.info_type_id = it2.id)
                                      ->  Sort  (cost=233464.00..233464.00 rows=5699 width=38) (actual time=126.233..126.631 rows=5960 loops=1)
                                            Sort Key: mi_idx.info_type_id
                                            Sort Method: quicksort  Memory: 705kB
                                            ->  Nested Loop  (cost=211104.00..233464.00 rows=5699 width=38) (actual time=114.049..124.941 rows=5977 loops=1)
                                                  ->  Merge Join  (cost=211104.00..213340.00 rows=2236 width=25) (actual time=114.042..115.006 rows=3517 loops=1)
                                                        Merge Cond: (t.kind_id = kt.id)
                                                        ->  Sort  (cost=211097.00..211097.00 rows=7825 width=29) (actual time=114.031..114.305 rows=4040 loops=1)
                                                              Sort Key: t.kind_id
                                                              Sort Method: quicksort  Memory: 420kB
                                                              ->  Nested Loop  (cost=0.00..211097.00 rows=7825 width=29) (actual time=0.811..113.208 rows=4040 loops=1)
                                                                    ->  Nested Loop  (cost=0.00..136915.00 rows=37091 width=4) (actual time=0.800..39.499 rows=37091 loops=1)
                                                                          ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=3 width=4) (actual time=0.792..15.482 rows=3 loops=1)
                                                                                Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                Rows Removed by Filter: 134167
                                                                          ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.007..6.552 rows=12364 loops=3)
                                                                                Index Cond: (keyword_id = k.id)
                                                                    ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=37091)
                                                                          Index Cond: (id = mk.movie_id)
                                                                          Filter: (production_year > 2009)
                                                                          Rows Removed by Filter: 1
                                                        ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.009..0.009 rows=2 loops=1)
                                                              Sort Key: kt.id
                                                              Sort Method: quicksort  Memory: 25kB
                                                              ->  Seq Scan on kind_type kt  (cost=0.00..7.00 rows=2 width=4) (actual time=0.004..0.005 rows=2 loops=1)
                                                                    Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                                    Rows Removed by Filter: 5
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.002 rows=2 loops=3517)
                                                        Index Cond: (movie_id = t.id)
                                                        Filter: (info < '7.0'::text)
                                                        Rows Removed by Filter: 0
                                      ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=1)
                                            Sort Key: it2.id
                                            Sort Method: quicksort  Memory: 25kB
                                            ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                  Filter: ((info)::text = 'rating'::text)
                                                  Rows Removed by Filter: 112
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.00..10.00 rows=1 width=12) (actual time=0.007..0.007 rows=0 loops=1615)
                                      Index Cond: (movie_id = t.id)
                                      Filter: ((note !~~ '%(USA)%'::text) AND (note ~~ '%(200%)%'::text))
                                      Rows Removed by Filter: 12
                          ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=78)
                                Index Cond: (id = mc.company_type_id)
                                Heap Fetches: 78
                    ->  Index Scan using company_name_pkey on company_name cn  (cost=0.00..2.00 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=78)
                          Index Cond: (id = mc.company_id)
                          Filter: ((country_code)::text <> '[us]'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.00..84.00 rows=2 width=8) (actual time=0.020..0.022 rows=1 loops=50)
                    Index Cond: (movie_id = t.id)
                    Filter: (info = ANY ('{Germany,German,USA,American}'::text[]))
                    Rows Removed by Filter: 53
        ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=34)
              Index Cond: (id = mi.info_type_id)
              Filter: ((info)::text = 'countries'::text)
              Rows Removed by Filter: 0
Planning time: 18.754 ms
Execution time: 139.965 ms
