Aggregate  (cost=427836.13..427837.13 rows=1 width=96) (actual time=271.377..271.377 rows=1 loops=1)
  ->  Nested Loop  (cost=298985.00..427836.13 rows=1 width=41) (actual time=159.544..268.311 rows=8373 loops=1)
        ->  Nested Loop  (cost=298985.00..427834.13 rows=1 width=26) (actual time=159.538..251.267 rows=8771 loops=1)
              ->  Nested Loop  (cost=298985.00..427830.80 rows=1 width=30) (actual time=159.535..242.465 rows=9128 loops=1)
                    ->  Nested Loop  (cost=298985.00..427828.00 rows=1 width=34) (actual time=159.531..233.511 rows=9128 loops=1)
                          ->  Hash Join  (cost=298985.00..427806.00 rows=2 width=46) (actual time=159.524..222.765 rows=871 loops=1)
                                Hash Cond: (mi.info_type_id = it1.id)
                                ->  Nested Loop  (cost=298871.00..427422.00 rows=272 width=50) (actual time=159.506..222.524 rows=984 loops=1)
                                      ->  Hash Join  (cost=298871.00..344776.00 rows=961 width=42) (actual time=159.377..173.153 rows=961 loops=1)
                                            Hash Cond: (cc.subject_id = cct1.id)
                                            ->  Hash Join  (cost=298866.00..343860.00 rows=1215 width=46) (actual time=159.361..172.882 rows=1215 loops=1)
                                                  Hash Cond: (cc.status_id = cct2.id)
                                                  ->  Nested Loop  (cost=298861.00..342681.00 rows=1565 width=50) (actual time=159.349..172.543 rows=1565 loops=1)
                                                        ->  Merge Join  (cost=298861.00..299055.00 rows=7271 width=38) (actual time=159.334..161.437 rows=7271 loops=1)
                                                              Merge Cond: (mi_idx.info_type_id = it2.id)
                                                              ->  Sort  (cost=298748.00..298748.00 rows=21917 width=42) (actual time=157.363..158.787 rows=21860 loops=1)
                                                                    Sort Key: mi_idx.info_type_id
                                                                    Sort Method: quicksort  Memory: 2800kB
                                                                    ->  Nested Loop  (cost=0.00..298748.00 rows=21917 width=42) (actual time=0.813..152.079 rows=21917 loops=1)
                                                                          ->  Nested Loop  (cost=0.00..211097.00 rows=9739 width=29) (actual time=0.807..119.720 rows=9739 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..136915.00 rows=37091 width=4) (actual time=0.804..41.417 rows=37091 loops=1)
                                                                                      ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=3 width=4) (actual time=0.796..16.094 rows=3 loops=1)
                                                                                            Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                            Rows Removed by Filter: 134167
                                                                                      ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.007..6.945 rows=12364 loops=3)
                                                                                            Index Cond: (keyword_id = k.id)
                                                                                ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=37091)
                                                                                      Index Cond: (id = mk.movie_id)
                                                                                      Filter: (production_year > 2005)
                                                                                      Rows Removed by Filter: 1
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.003 rows=2 loops=9739)
                                                                                Index Cond: (movie_id = t.id)
                                                                                Filter: (info < '8.5'::text)
                                                                                Rows Removed by Filter: 0
                                                              ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.016..0.016 rows=1 loops=1)
                                                                    Sort Key: it2.id
                                                                    Sort Method: quicksort  Memory: 25kB
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.00..4.00 rows=2 width=12) (actual time=0.001..0.001 rows=0 loops=7271)
                                                              Index Cond: (movie_id = t.id)
                                                  ->  Hash  (cost=4.00..4.00 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                        Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                        ->  Seq Scan on comp_cast_type cct2  (cost=0.00..4.00 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                              Filter: ((kind)::text = 'complete'::text)
                                                              Rows Removed by Filter: 3
                                            ->  Hash  (cost=4.00..4.00 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on comp_cast_type cct1  (cost=0.00..4.00 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                        Filter: ((kind)::text = 'cast'::text)
                                                        Rows Removed by Filter: 3
                                      ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.00..84.00 rows=2 width=8) (actual time=0.043..0.051 rows=1 loops=961)
                                            Index Cond: (movie_id = t.id)
                                            Filter: (info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                                            Rows Removed by Filter: 123
                                ->  Hash  (cost=113.00..113.00 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                      ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.007..0.013 rows=1 loops=1)
                                            Filter: ((info)::text = 'countries'::text)
                                            Rows Removed by Filter: 112
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.00..10.00 rows=1 width=12) (actual time=0.005..0.011 rows=10 loops=871)
                                Index Cond: (movie_id = t.id)
                                Filter: ((note !~~ '%(USA)%'::text) AND (note ~~ '%(200%)%'::text))
                                Rows Removed by Filter: 12
                    ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=9128)
                          Index Cond: (id = mc.company_type_id)
                          Heap Fetches: 9128
              ->  Index Scan using kind_type_pkey on kind_type kt  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=9128)
                    Index Cond: (id = t.kind_id)
                    Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                    Rows Removed by Filter: 0
        ->  Index Scan using company_name_pkey on company_name cn  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=8771)
              Index Cond: (id = mc.company_id)
              Filter: ((country_code)::text <> '[us]'::text)
              Rows Removed by Filter: 0
Planning time: 54.576 ms
Execution time: 271.462 ms
