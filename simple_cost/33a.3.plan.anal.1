Aggregate  (cost=22115.00..22116.00 rows=1 width=192) (actual time=30.029..30.029 rows=1 loops=1)
  ->  Nested Loop  (cost=15913.00..22115.00 rows=1 width=82) (actual time=15.146..30.019 rows=8 loops=1)
        ->  Nested Loop  (cost=15913.00..22111.00 rows=1 width=86) (actual time=5.275..29.304 rows=815 loops=1)
              ->  Nested Loop  (cost=15913.00..22107.00 rows=1 width=90) (actual time=5.243..27.051 rows=2445 loops=1)
                    ->  Nested Loop  (cost=15913.00..22093.00 rows=2 width=93) (actual time=5.240..23.783 rows=1395 loops=1)
                          ->  Nested Loop  (cost=15913.00..22089.00 rows=2 width=78) (actual time=5.238..21.370 rows=1395 loops=1)
                                ->  Nested Loop  (cost=15913.00..22059.00 rows=2 width=70) (actual time=5.236..20.643 rows=174 loops=1)
                                      ->  Hash Join  (cost=15913.00..22032.00 rows=3 width=73) (actual time=5.232..20.471 rows=59 loops=1)
                                            Hash Cond: (t2.kind_id = kt2.id)
                                            ->  Nested Loop  (cost=15905.00..22005.00 rows=22 width=77) (actual time=5.223..20.428 rows=135 loops=1)
                                                  ->  Nested Loop  (cost=15905.00..21885.00 rows=60 width=62) (actual time=4.811..19.335 rows=614 loops=1)
                                                        ->  Nested Loop  (cost=15905.00..21201.00 rows=342 width=37) (actual time=4.782..9.541 rows=5983 loops=1)
                                                              ->  Merge Join  (cost=15905.00..16236.00 rows=331 width=29) (actual time=4.778..5.115 rows=1454 loops=1)
                                                                    Merge Cond: (t1.kind_id = kt1.id)
                                                                    ->  Sort  (cost=15898.00..15898.00 rows=2315 width=33) (actual time=4.769..4.861 rows=1455 loops=1)
                                                                          Sort Key: t1.kind_id
                                                                          Sort Method: quicksort  Memory: 297kB
                                                                          ->  Nested Loop  (cost=0.00..15898.00 rows=2315 width=33) (actual time=0.016..4.332 rows=2315 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..11268.00 rows=2315 width=8) (actual time=0.013..0.685 rows=2315 loops=1)
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.002..0.005 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                                      ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.008..0.206 rows=1158 loops=2)
                                                                                            Index Cond: (link_type_id = lt.id)
                                                                                ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=2315)
                                                                                      Index Cond: (id = ml.movie_id)
                                                                    ->  Sort  (cost=7.00..7.00 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=1)
                                                                          Sort Key: kt1.id
                                                                          Sort Method: quicksort  Memory: 25kB
                                                                          ->  Seq Scan on kind_type kt1  (cost=0.00..7.00 rows=1 width=4) (actual time=0.003..0.004 rows=1 loops=1)
                                                                                Filter: ((kind)::text = 'tv series'::text)
                                                                                Rows Removed by Filter: 6
                                                              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=4 loops=1454)
                                                                    Index Cond: (movie_id = t1.id)
                                                        ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=0 loops=5983)
                                                              Index Cond: (id = ml.linked_movie_id)
                                                              Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=614)
                                                        Index Cond: (id = mc1.company_id)
                                                        Filter: ((country_code)::text = '[us]'::text)
                                                        Rows Removed by Filter: 1
                                            ->  Hash  (cost=7.00..7.00 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=1 width=4) (actual time=0.004..0.005 rows=1 loops=1)
                                                        Filter: ((kind)::text = 'tv series'::text)
                                                        Rows Removed by Filter: 6
                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=59)
                                            Index Cond: (movie_id = t1.id)
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.003 rows=8 loops=174)
                                      Index Cond: (movie_id = t2.id)
                          ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=1395)
                                Index Cond: (id = mc2.company_id)
                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=1 width=13) (actual time=0.001..0.002 rows=2 loops=1395)
                          Index Cond: (movie_id = t2.id)
                          Filter: (info < '3.0'::text)
                          Rows Removed by Filter: 1
              ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=2445)
                    Index Cond: (id = mi_idx1.info_type_id)
                    Filter: ((info)::text = 'rating'::text)
                    Rows Removed by Filter: 1
        ->  Index Scan using info_type_pkey on info_type it2  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=815)
              Index Cond: (id = mi_idx2.info_type_id)
              Filter: ((info)::text = 'rating'::text)
              Rows Removed by Filter: 1
Planning time: 60.012 ms
Execution time: 30.108 ms
