Aggregate  (cost=399344.00..399345.00 rows=1 width=96) (actual time=227.366..227.366 rows=1 loops=1)
  ->  Merge Join  (cost=399208.00..399344.00 rows=136 width=41) (actual time=225.262..226.193 rows=4803 loops=1)
        Merge Cond: (mi_idx.info_type_id = it2.id)
        ->  Sort  (cost=399095.00..399095.00 rows=15325 width=45) (actual time=223.950..224.737 rows=14699 loops=1)
              Sort Key: mi_idx.info_type_id
              Sort Method: quicksort  Memory: 1953kB
              ->  Nested Loop  (cost=211238.00..399095.00 rows=15325 width=45) (actual time=122.198..220.493 rows=15325 loops=1)
                    ->  Hash Join  (cost=211238.00..367517.00 rows=15789 width=30) (actual time=122.192..193.640 rows=15789 loops=1)
                          Hash Cond: (mc.company_type_id = ct.id)
                          ->  Nested Loop  (cost=211230.00..355667.00 rows=15789 width=34) (actual time=122.182..190.702 rows=15789 loops=1)
                                ->  Nested Loop  (cost=211230.00..340575.00 rows=1372 width=46) (actual time=121.803..175.614 rows=1372 loops=1)
                                      ->  Hash Join  (cost=211230.00..336183.00 rows=488 width=33) (actual time=121.794..173.477 rows=488 loops=1)
                                            Hash Cond: (mi.info_type_id = it1.id)
                                            ->  Nested Loop  (cost=211116.00..335531.00 rows=543 width=37) (actual time=121.781..173.342 rows=543 loops=1)
                                                  ->  Hash Join  (cost=211116.00..288317.00 rows=549 width=29) (actual time=121.760..142.336 rows=549 loops=1)
                                                        Hash Cond: (cc.status_id = cct2.id)
                                                        ->  Hash Join  (cost=211109.00..287845.00 rows=620 width=33) (actual time=121.754..142.195 rows=620 loops=1)
                                                              Hash Cond: (cc.subject_id = cct1.id)
                                                              ->  Nested Loop  (cost=211104.00..285440.00 rows=3200 width=37) (actual time=121.748..141.811 rows=3200 loops=1)
                                                                    ->  Merge Join  (cost=211104.00..215324.00 rows=11686 width=25) (actual time=121.719..125.048 rows=11686 loops=1)
                                                                          Merge Cond: (kt.id = t.kind_id)
                                                                          ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.005..0.006 rows=2 loops=1)
                                                                                Sort Key: kt.id
                                                                                Sort Method: quicksort  Memory: 25kB
                                                                                ->  Seq Scan on kind_type kt  (cost=0.00..7.00 rows=2 width=4) (actual time=0.002..0.003 rows=2 loops=1)
                                                                                      Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                                                      Rows Removed by Filter: 5
                                                                          ->  Sort  (cost=211097.00..211097.00 rows=14771 width=29) (actual time=121.711..122.793 rows=14771 loops=1)
                                                                                Sort Key: t.kind_id
                                                                                Sort Method: quicksort  Memory: 1572kB
                                                                                ->  Nested Loop  (cost=0.00..211097.00 rows=14771 width=29) (actual time=0.804..118.888 rows=14771 loops=1)
                                                                                      ->  Nested Loop  (cost=0.00..136915.00 rows=37091 width=4) (actual time=0.799..41.165 rows=37091 loops=1)
                                                                                            ->  Seq Scan on keyword k  (cost=0.00..134170.00 rows=3 width=4) (actual time=0.791..16.012 rows=3 loops=1)
                                                                                                  Filter: (keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                                  Rows Removed by Filter: 134167
                                                                                            ->  Index Scan using keyword_id_movie_keyword on movie_keyword mk  (cost=0.00..610.00 rows=305 width=8) (actual time=0.007..6.929 rows=12364 loops=3)
                                                                                                  Index Cond: (keyword_id = k.id)
                                                                                      ->  Index Scan using title_pkey on title t  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=37091)
                                                                                            Index Cond: (id = mk.movie_id)
                                                                                            Filter: (production_year > 2000)
                                                                                            Rows Removed by Filter: 1
                                                                    ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.00..4.00 rows=2 width=12) (actual time=0.001..0.001 rows=0 loops=11686)
                                                                          Index Cond: (movie_id = t.id)
                                                              ->  Hash  (cost=4.00..4.00 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on comp_cast_type cct1  (cost=0.00..4.00 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                                          Filter: ((kind)::text = 'crew'::text)
                                                                          Rows Removed by Filter: 3
                                                        ->  Hash  (cost=4.00..4.00 rows=3 width=4) (actual time=0.003..0.003 rows=3 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on comp_cast_type cct2  (cost=0.00..4.00 rows=3 width=4) (actual time=0.002..0.002 rows=3 loops=1)
                                                                    Filter: ((kind)::text <> 'complete+verified'::text)
                                                                    Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.00..84.00 rows=2 width=8) (actual time=0.048..0.056 rows=1 loops=549)
                                                        Index Cond: (movie_id = t.id)
                                                        Filter: (info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                                                        Rows Removed by Filter: 133
                                            ->  Hash  (cost=113.00..113.00 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on info_type it1  (cost=0.00..113.00 rows=1 width=4) (actual time=0.004..0.010 rows=1 loops=1)
                                                        Filter: ((info)::text = 'countries'::text)
                                                        Rows Removed by Filter: 112
                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.00..6.00 rows=3 width=13) (actual time=0.003..0.004 rows=3 loops=488)
                                            Index Cond: (movie_id = t.id)
                                            Filter: (info < '8.5'::text)
                                            Rows Removed by Filter: 0
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.00..10.00 rows=1 width=12) (actual time=0.003..0.010 rows=12 loops=1372)
                                      Index Cond: (movie_id = t.id)
                                      Filter: ((note !~~ '%(USA)%'::text) AND (note ~~ '%(200%)%'::text))
                                      Rows Removed by Filter: 11
                          ->  Hash  (cost=4.00..4.00 rows=4 width=4) (actual time=0.006..0.006 rows=4 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on company_type ct  (cost=0.00..4.00 rows=4 width=4) (actual time=0.004..0.004 rows=4 loops=1)
                    ->  Index Scan using company_name_pkey on company_name cn  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=15789)
                          Index Cond: (id = mc.company_id)
                          Filter: ((country_code)::text <> '[us]'::text)
                          Rows Removed by Filter: 0
        ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.023..0.023 rows=1 loops=1)
              Sort Key: it2.id
              Sort Method: quicksort  Memory: 25kB
              ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=1)
                    Filter: ((info)::text = 'rating'::text)
                    Rows Removed by Filter: 112
Planning time: 54.102 ms
Execution time: 227.459 ms
