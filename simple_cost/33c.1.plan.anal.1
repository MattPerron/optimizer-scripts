Aggregate  (cost=39546.33..39547.33 rows=1 width=192) (actual time=46.659..46.659 rows=1 loops=1)
  ->  Nested Loop  (cost=39509.00..39546.33 rows=1 width=82) (actual time=45.745..46.586 rows=114 loops=1)
        ->  Nested Loop  (cost=39509.00..39544.33 rows=1 width=67) (actual time=45.742..46.361 rows=131 loops=1)
              ->  Nested Loop  (cost=39509.00..39529.33 rows=1 width=75) (actual time=45.738..46.238 rows=44 loops=1)
                    ->  Nested Loop  (cost=39509.00..39525.33 rows=1 width=79) (actual time=45.728..46.106 rows=132 loops=1)
                          ->  Nested Loop  (cost=39509.00..39518.00 rows=3 width=83) (actual time=45.725..45.983 rows=132 loops=1)
                                ->  Merge Join  (cost=39509.00..39512.00 rows=3 width=58) (actual time=45.719..45.757 rows=132 loops=1)
                                      Merge Cond: (mi_idx2.info_type_id = it2.id)
                                      ->  Sort  (cost=39396.00..39396.00 rows=339 width=62) (actual time=44.146..44.788 rows=12942 loops=1)
                                            Sort Key: mi_idx2.info_type_id
                                            Sort Method: quicksort  Memory: 2215kB
                                            ->  Merge Join  (cost=39057.00..39396.00 rows=339 width=62) (actual time=37.784..41.155 rows=12942 loops=1)
                                                  Merge Cond: (t2.kind_id = kt2.id)
                                                  ->  Sort  (cost=39050.00..39050.00 rows=1186 width=66) (actual time=37.685..38.448 rows=15072 loops=1)
                                                        Sort Key: t2.kind_id
                                                        Sort Method: quicksort  Memory: 2559kB
                                                        ->  Nested Loop  (cost=0.00..39050.00 rows=1186 width=66) (actual time=0.039..33.845 rows=15072 loops=1)
                                                              ->  Nested Loop  (cost=0.00..35486.00 rows=396 width=53) (actual time=0.036..22.137 rows=5298 loops=1)
                                                                    ->  Nested Loop  (cost=0.00..34694.00 rows=396 width=38) (actual time=0.032..12.674 rows=5298 loops=1)
                                                                          ->  Nested Loop  (cost=0.00..28934.00 rows=384 width=46) (actual time=0.027..8.221 rows=1318 loops=1)
                                                                                ->  Nested Loop  (cost=0.00..17934.00 rows=1375 width=33) (actual time=0.021..5.630 rows=946 loops=1)
                                                                                      ->  Nested Loop  (cost=0.00..11268.00 rows=3333 width=8) (actual time=0.016..0.787 rows=2315 loops=1)
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..18.00 rows=2 width=4) (actual time=0.005..0.009 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                                            ->  Index Scan using link_type_id_movie_link on movie_link ml  (cost=0.00..3750.00 rows=1875 width=12) (actual time=0.009..0.233 rows=1158 loops=2)
                                                                                                  Index Cond: (link_type_id = lt.id)
                                                                                      ->  Index Scan using title_pkey on title t2  (cost=0.00..2.00 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2315)
                                                                                            Index Cond: (id = ml.linked_movie_id)
                                                                                            Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                                            Rows Removed by Filter: 1
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.00..6.00 rows=2 width=13) (actual time=0.002..0.002 rows=1 loops=946)
                                                                                      Index Cond: (movie_id = t2.id)
                                                                                      Filter: (info < '3.5'::text)
                                                                                      Rows Removed by Filter: 1
                                                                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=1318)
                                                                                Index Cond: (movie_id = t2.id)
                                                                    ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=5298)
                                                                          Index Cond: (id = mc2.company_id)
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.00..6.00 rows=3 width=13) (actual time=0.001..0.002 rows=3 loops=5298)
                                                                    Index Cond: (movie_id = ml.movie_id)
                                                  ->  Sort  (cost=7.00..7.00 rows=2 width=4) (actual time=0.009..0.010 rows=2 loops=1)
                                                        Sort Key: kt2.id
                                                        Sort Method: quicksort  Memory: 25kB
                                                        ->  Seq Scan on kind_type kt2  (cost=0.00..7.00 rows=2 width=4) (actual time=0.005..0.005 rows=2 loops=1)
                                                              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                              Rows Removed by Filter: 5
                                      ->  Sort  (cost=113.00..113.00 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                            Sort Key: it2.id
                                            Sort Method: quicksort  Memory: 25kB
                                            ->  Seq Scan on info_type it2  (cost=0.00..113.00 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                  Filter: ((info)::text = 'rating'::text)
                                                  Rows Removed by Filter: 112
                                ->  Index Scan using title_pkey on title t1  (cost=0.00..2.00 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=132)
                                      Index Cond: (id = ml.movie_id)
                          ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=132)
                                Index Cond: (id = t1.kind_id)
                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                    ->  Index Scan using info_type_pkey on info_type it1  (cost=0.00..2.00 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=132)
                          Index Cond: (id = mi_idx1.info_type_id)
                          Filter: ((info)::text = 'rating'::text)
                          Rows Removed by Filter: 1
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.00..10.00 rows=5 width=8) (actual time=0.002..0.002 rows=3 loops=44)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.00..2.00 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=131)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text <> '[us]'::text)
              Rows Removed by Filter: 0
Planning time: 57.634 ms
Execution time: 46.742 ms
