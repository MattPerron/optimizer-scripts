Aggregate  (cost=10917.72..10917.73 rows=1 width=96) (actual time=45.354..45.354 rows=1 loops=1)
  ->  Nested Loop  (cost=3651.70..10917.71 rows=1 width=48) (actual time=18.511..44.781 rows=1874 loops=1)
        Join Filter: (ml.movie_id = mi.movie_id)
        ->  Nested Loop  (cost=3651.27..10915.85 rows=1 width=64) (actual time=18.497..40.804 rows=402 loops=1)
              ->  Nested Loop  (cost=3650.85..10915.40 rows=1 width=49) (actual time=14.843..39.105 rows=962 loops=1)
                    ->  Nested Loop  (cost=3650.72..10915.08 rows=2 width=53) (actual time=14.840..38.206 rows=1021 loops=1)
                          Join Filter: (ml.movie_id = mc.movie_id)
                          ->  Nested Loop  (cost=3650.29..10914.50 rows=1 width=41) (actual time=14.832..37.422 rows=199 loops=1)
                                Join Filter: (ml.movie_id = t.id)
                                ->  Hash Join  (cost=3649.86..10913.99 rows=1 width=20) (actual time=14.823..37.023 rows=199 loops=1)
                                      Hash Cond: (mk.keyword_id = k.id)
                                      ->  Merge Join  (cost=1023.72..6385.76 rows=150662 width=24) (actual time=5.473..26.817 rows=17543 loops=1)
                                            Merge Cond: (mk.movie_id = ml.movie_id)
                                            ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..141990.43 rows=4523930 width=8) (actual time=0.007..12.135 rows=97855 loops=1)
                                            ->  Sort  (cost=1023.17..1031.50 rows=3333 width=16) (actual time=5.447..6.265 rows=18063 loops=1)
                                                  Sort Key: ml.movie_id
                                                  Sort Method: quicksort  Memory: 205kB
                                                  ->  Hash Join  (cost=1.25..828.15 rows=3333 width=16) (actual time=0.023..5.012 rows=2315 loops=1)
                                                        Hash Cond: (ml.link_type_id = lt.id)
                                                        ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=8) (actual time=0.007..2.165 rows=29997 loops=1)
                                                        ->  Hash  (cost=1.23..1.23 rows=2 width=16) (actual time=0.007..0.007 rows=2 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=2 width=16) (actual time=0.003..0.006 rows=2 loops=1)
                                                                    Filter: ((link)::text ~~ '%follow%'::text)
                                                                    Rows Removed by Filter: 16
                                      ->  Hash  (cost=2626.12..2626.12 rows=1 width=4) (actual time=9.070..9.070 rows=1 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.522..9.069 rows=1 loops=1)
                                                  Filter: (keyword = 'sequel'::text)
                                                  Rows Removed by Filter: 134169
                                ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.002..0.002 rows=1 loops=199)
                                      Index Cond: (id = mk.movie_id)
                                      Filter: ((production_year >= 1950) AND (production_year <= 2010))
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=3 width=12) (actual time=0.002..0.003 rows=5 loops=199)
                                Index Cond: (movie_id = mk.movie_id)
                                Filter: (note IS NULL)
                                Rows Removed by Filter: 2
                    ->  Index Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1021)
                          Index Cond: (id = mc.company_type_id)
                          Filter: ((kind)::text = 'production companies'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=962)
                    Index Cond: (id = mc.company_id)
                    Filter: (((country_code)::text <> '[pl]'::text) AND ((name ~~ '%Film%'::text) OR (name ~~ '%Warner%'::text)))
                    Rows Removed by Filter: 1
        ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.82 rows=3 width=4) (actual time=0.007..0.009 rows=5 loops=402)
              Index Cond: (movie_id = mk.movie_id)
              Filter: (info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,English}'::text[]))
              Rows Removed by Filter: 16
Planning time: 7.467 ms
Execution time: 45.425 ms
