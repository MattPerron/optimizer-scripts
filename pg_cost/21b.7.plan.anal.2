Aggregate  (cost=8722.22..8722.23 rows=1 width=96) (actual time=38.665..38.666 rows=1 loops=1)
  ->  Hash Join  (cost=3586.98..8722.11 rows=14 width=48) (actual time=31.015..38.646 rows=38 loops=1)
        Hash Cond: (mc.company_type_id = ct.id)
        ->  Nested Loop  (cost=3585.92..8719.65 rows=135 width=52) (actual time=31.004..38.628 rows=38 loops=1)
              ->  Nested Loop  (cost=3585.50..8658.94 rows=133 width=37) (actual time=30.987..38.415 rows=133 loops=1)
                    Join Filter: (ml.movie_id = mc.movie_id)
                    ->  Nested Loop  (cost=3585.07..8647.96 rows=19 width=45) (actual time=30.978..38.325 rows=19 loops=1)
                          Join Filter: (ml.movie_id = mi.movie_id)
                          ->  Nested Loop  (cost=3584.63..8577.56 rows=48 width=41) (actual time=14.836..37.879 rows=48 loops=1)
                                Join Filter: (ml.movie_id = t.id)
                                ->  Hash Join  (cost=3584.20..8477.47 rows=199 width=20) (actual time=14.827..37.547 rows=199 loops=1)
                                      Hash Cond: (mk.keyword_id = k.id)
                                      ->  Merge Join  (cost=958.07..5629.85 rows=17543 width=24) (actual time=5.449..27.204 rows=17543 loops=1)
                                            Merge Cond: (mk.movie_id = ml.movie_id)
                                            ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..141990.43 rows=4523930 width=8) (actual time=0.006..12.358 rows=97855 loops=1)
                                            ->  Sort  (cost=957.52..963.31 rows=2315 width=16) (actual time=5.424..6.261 rows=18063 loops=1)
                                                  Sort Key: ml.movie_id
                                                  Sort Method: quicksort  Memory: 205kB
                                                  ->  Hash Join  (cost=1.25..828.15 rows=2315 width=16) (actual time=0.019..5.000 rows=2315 loops=1)
                                                        Hash Cond: (ml.link_type_id = lt.id)
                                                        ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=8) (actual time=0.005..2.183 rows=29997 loops=1)
                                                        ->  Hash  (cost=1.23..1.23 rows=2 width=16) (actual time=0.006..0.006 rows=2 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=2 width=16) (actual time=0.003..0.005 rows=2 loops=1)
                                                                    Filter: ((link)::text ~~ '%follow%'::text)
                                                                    Rows Removed by Filter: 16
                                      ->  Hash  (cost=2626.12..2626.12 rows=1 width=4) (actual time=9.150..9.150 rows=1 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.541..9.149 rows=1 loops=1)
                                                  Filter: (keyword = 'sequel'::text)
                                                  Rows Removed by Filter: 134169
                                ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.001..0.001 rows=0 loops=199)
                                      Index Cond: (id = mk.movie_id)
                                      Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                      Rows Removed by Filter: 1
                          ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.45 rows=1 width=4) (actual time=0.009..0.009 rows=0 loops=48)
                                Index Cond: (movie_id = mk.movie_id)
                                Filter: (info = ANY ('{Germany,German}'::text[]))
                                Rows Removed by Filter: 29
                    ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=3 width=12) (actual time=0.002..0.004 rows=7 loops=19)
                          Index Cond: (movie_id = mk.movie_id)
                          Filter: (note IS NULL)
                          Rows Removed by Filter: 6
              ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.001..0.001 rows=0 loops=133)
                    Index Cond: (id = mc.company_id)
                    Filter: (((country_code)::text <> '[pl]'::text) AND ((name ~~ '%Film%'::text) OR (name ~~ '%Warner%'::text)))
                    Rows Removed by Filter: 1
        ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                    Filter: ((kind)::text = 'production companies'::text)
                    Rows Removed by Filter: 3
Planning time: 7.486 ms
Execution time: 38.742 ms
