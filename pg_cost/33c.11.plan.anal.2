Aggregate  (cost=8461.37..8461.38 rows=1 width=192) (actual time=28.195..28.195 rows=1 loops=1)
  ->  Nested Loop  (cost=5810.12..8461.25 rows=8 width=82) (actual time=14.514..28.122 rows=114 loops=1)
        ->  Nested Loop  (cost=5809.70..8454.57 rows=15 width=67) (actual time=14.510..27.857 rows=131 loops=1)
              ->  Hash Join  (cost=5809.27..8445.44 rows=15 width=75) (actual time=14.505..27.725 rows=44 loops=1)
                    Hash Cond: (t2.kind_id = kt2.id)
                    ->  Nested Loop  (cost=5808.16..8443.74 rows=51 width=79) (actual time=13.939..27.692 rows=51 loops=1)
                          Join Filter: (ml.linked_movie_id = t2.id)
                          ->  Hash Join  (cost=5807.73..8399.15 rows=84 width=70) (actual time=13.931..27.488 rows=84 loops=1)
                                Hash Cond: (t1.kind_id = kt1.id)
                                ->  Nested Loop  (cost=5806.62..8397.09 rows=84 width=74) (actual time=13.924..27.461 rows=84 loops=1)
                                      Join Filter: (ml.movie_id = t1.id)
                                      ->  Nested Loop  (cost=5806.19..8348.00 rows=84 width=49) (actual time=13.916..27.265 rows=84 loops=1)
                                            ->  Nested Loop  (cost=5805.77..8310.78 rows=84 width=34) (actual time=13.906..27.042 rows=84 loops=1)
                                                  Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                                  ->  Hash Join  (cost=5805.34..8280.97 rows=41 width=26) (actual time=13.897..26.860 rows=41 loops=1)
                                                        Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                        ->  Hash Join  (cost=5802.91..8277.00 rows=123 width=30) (actual time=13.878..26.830 rows=123 loops=1)
                                                              Hash Cond: (mi_idx2.info_type_id = it2.id)
                                                              ->  Merge Join  (cost=5800.49..8165.27 rows=8712 width=34) (actual time=12.417..26.218 rows=8712 loops=1)
                                                                    Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.008..7.799 rows=63901 loops=1)
                                                                    ->  Sort  (cost=5800.05..5807.75 rows=3080 width=21) (actual time=12.386..12.818 rows=8888 loops=1)
                                                                          Sort Key: ml.movie_id
                                                                          Sort Method: quicksort  Memory: 337kB
                                                                          ->  Nested Loop  (cost=1.70..5621.58 rows=3080 width=21) (actual time=0.030..11.721 rows=3080 loops=1)
                                                                                ->  Hash Join  (cost=1.27..828.17 rows=2315 width=8) (actual time=0.020..5.156 rows=2315 loops=1)
                                                                                      Hash Cond: (ml.link_type_id = lt.id)
                                                                                      ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.005..2.298 rows=29997 loops=1)
                                                                                      ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                      Index Cond: (movie_id = ml.linked_movie_id)
                                                                                      Filter: (info < '3.5'::text)
                                                                                      Rows Removed by Filter: 1
                                                              ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.018..0.018 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.017..0.018 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.66 rows=5 width=8) (actual time=0.003..0.004 rows=2 loops=41)
                                                        Index Cond: (movie_id = mi_idx2.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=84)
                                                  Index Cond: (id = mc2.company_id)
                                      ->  Index Scan using title_pkey on title t1  (cost=0.43..0.57 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=84)
                                            Index Cond: (id = mi_idx1.movie_id)
                                ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.003..0.003 rows=2 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                      ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.002..0.003 rows=2 loops=1)
                                            Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                            Rows Removed by Filter: 5
                          ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=84)
                                Index Cond: (id = mc2.movie_id)
                                Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                Rows Removed by Filter: 0
                    ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.013..0.013 rows=2 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.009..0.010 rows=2 loops=1)
                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                Rows Removed by Filter: 5
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.002 rows=3 loops=44)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text <> '[us]'::text)
              Rows Removed by Filter: 0
Planning time: 59.036 ms
Execution time: 28.318 ms
