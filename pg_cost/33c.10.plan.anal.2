Aggregate  (cost=16374.47..16374.48 rows=1 width=192) (actual time=34.128..34.129 rows=1 loops=1)
  ->  Nested Loop  (cost=968.04..16374.39 rows=5 width=82) (actual time=8.893..34.055 rows=114 loops=1)
        ->  Nested Loop  (cost=967.62..16369.93 rows=10 width=67) (actual time=8.890..33.777 rows=131 loops=1)
              ->  Hash Join  (cost=967.19..16363.85 rows=10 width=75) (actual time=8.885..33.642 rows=44 loops=1)
                    Hash Cond: (t2.kind_id = kt2.id)
                    ->  Nested Loop  (cost=966.08..16362.34 rows=35 width=79) (actual time=8.108..33.611 rows=51 loops=1)
                          Join Filter: (ml.linked_movie_id = t2.id)
                          ->  Nested Loop  (cost=965.65..16317.75 rows=84 width=70) (actual time=8.100..33.387 rows=84 loops=1)
                                ->  Nested Loop  (cost=965.23..16280.53 rows=84 width=55) (actual time=8.092..33.148 rows=84 loops=1)
                                      Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                      ->  Hash Join  (cost=964.80..16250.73 rows=41 width=47) (actual time=8.083..32.958 rows=41 loops=1)
                                            Hash Cond: (t1.kind_id = kt1.id)
                                            ->  Nested Loop  (cost=963.69..16249.15 rows=41 width=51) (actual time=8.077..32.942 rows=41 loops=1)
                                                  Join Filter: (ml.movie_id = t1.id)
                                                  ->  Hash Join  (cost=963.26..16225.19 rows=41 width=26) (actual time=8.068..32.801 rows=41 loops=1)
                                                        Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                        ->  Hash Join  (cost=960.83..16221.22 rows=123 width=30) (actual time=8.040..32.769 rows=123 loops=1)
                                                              Hash Cond: (mi_idx2.info_type_id = it2.id)
                                                              ->  Nested Loop  (cost=958.41..16109.49 rows=8712 width=34) (actual time=5.030..32.121 rows=8712 loops=1)
                                                                    ->  Merge Join  (cost=957.98..3288.40 rows=6192 width=21) (actual time=5.017..18.279 rows=6192 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.008..7.807 rows=63901 loops=1)
                                                                          ->  Sort  (cost=957.54..963.33 rows=2315 width=8) (actual time=4.985..5.357 rows=6443 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Hash Join  (cost=1.27..828.17 rows=2315 width=8) (actual time=0.019..4.667 rows=2315 loops=1)
                                                                                      Hash Cond: (ml.link_type_id = lt.id)
                                                                                      ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.005..2.047 rows=29997 loops=1)
                                                                                      ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.005 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.001..0.002 rows=1 loops=6192)
                                                                          Index Cond: (movie_id = ml.linked_movie_id)
                                                                          Filter: (info < '3.5'::text)
                                                                          Rows Removed by Filter: 1
                                                              ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.011 rows=1 loops=1)
                                                                    Filter: ((info)::text = 'rating'::text)
                                                                    Rows Removed by Filter: 112
                                                  ->  Index Scan using title_pkey on title t1  (cost=0.43..0.57 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=41)
                                                        Index Cond: (id = mi_idx1.movie_id)
                                            ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.003..0.003 rows=2 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.002..0.002 rows=2 loops=1)
                                                        Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                        Rows Removed by Filter: 5
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.66 rows=5 width=8) (actual time=0.003..0.004 rows=2 loops=41)
                                            Index Cond: (movie_id = mi_idx2.movie_id)
                                ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=84)
                                      Index Cond: (id = mc2.company_id)
                          ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=84)
                                Index Cond: (id = mc2.movie_id)
                                Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                Rows Removed by Filter: 0
                    ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.012..0.012 rows=2 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.009..0.010 rows=2 loops=1)
                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                Rows Removed by Filter: 5
              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.002 rows=3 loops=44)
                    Index Cond: (movie_id = t1.id)
        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
              Index Cond: (id = mc1.company_id)
              Filter: ((country_code)::text <> '[us]'::text)
              Rows Removed by Filter: 0
Planning time: 59.105 ms
Execution time: 34.254 ms
