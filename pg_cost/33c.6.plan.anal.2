Aggregate  (cost=17305.07..17305.08 rows=1 width=192) (actual time=52.135..52.135 rows=1 loops=1)
  ->  Nested Loop  (cost=968.04..17305.03 rows=3 width=82) (actual time=10.973..52.054 rows=114 loops=1)
        ->  Nested Loop  (cost=967.62..17303.70 rows=3 width=67) (actual time=10.969..51.846 rows=114 loops=1)
              ->  Hash Join  (cost=967.19..17301.70 rows=3 width=75) (actual time=10.964..51.684 rows=46 loops=1)
                    Hash Cond: (mi_idx2.info_type_id = it2.id)
                    ->  Hash Join  (cost=964.77..17295.18 rows=326 width=79) (actual time=5.801..51.243 rows=4086 loops=1)
                          Hash Cond: (t1.kind_id = kt1.id)
                          ->  Nested Loop  (cost=963.65..17281.11 rows=1141 width=83) (actual time=5.793..50.253 rows=4086 loops=1)
                                Join Filter: (ml.movie_id = t1.id)
                                ->  Hash Join  (cost=963.22..16681.15 rows=1141 width=74) (actual time=5.788..43.573 rows=4086 loops=1)
                                      Hash Cond: (t2.kind_id = kt2.id)
                                      ->  Nested Loop  (cost=962.11..16634.67 rows=3995 width=78) (actual time=5.077..42.466 rows=4939 loops=1)
                                            ->  Nested Loop  (cost=961.69..13320.41 rows=7438 width=63) (actual time=5.069..32.129 rows=5763 loops=1)
                                                  Join Filter: (ml.movie_id = mc1.movie_id)
                                                  ->  Nested Loop  (cost=961.26..12509.26 rows=1238 width=55) (actual time=5.062..27.478 rows=1238 loops=1)
                                                        ->  Nested Loop  (cost=960.83..12039.12 rows=851 width=42) (actual time=5.051..24.854 rows=851 loops=1)
                                                              ->  Hash Join  (cost=960.40..3368.51 rows=2064 width=17) (actual time=5.031..19.587 rows=2064 loops=1)
                                                                    Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                    ->  Merge Join  (cost=957.98..3288.40 rows=6192 width=21) (actual time=5.006..18.839 rows=6192 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.007..8.079 rows=63901 loops=1)
                                                                          ->  Sort  (cost=957.54..963.33 rows=2315 width=8) (actual time=4.977..5.354 rows=6443 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Hash Join  (cost=1.27..828.17 rows=2315 width=8) (actual time=0.019..4.675 rows=2315 loops=1)
                                                                                      Hash Cond: (ml.link_type_id = lt.id)
                                                                                      ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.005..2.036 rows=29997 loops=1)
                                                                                      ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.005 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                    ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                              ->  Index Scan using title_pkey on title t2  (cost=0.43..4.20 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2064)
                                                                    Index Cond: (id = ml.linked_movie_id)
                                                                    Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.53 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=851)
                                                              Index Cond: (movie_id = t2.id)
                                                              Filter: (info < '3.5'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.003 rows=5 loops=1238)
                                                        Index Cond: (movie_id = mi_idx1.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=5763)
                                                  Index Cond: (id = mc1.company_id)
                                                  Filter: ((country_code)::text <> '[us]'::text)
                                                  Rows Removed by Filter: 0
                                      ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.003..0.003 rows=2 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.001..0.002 rows=2 loops=1)
                                                  Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                  Rows Removed by Filter: 5
                                ->  Index Scan using title_pkey on title t1  (cost=0.43..0.51 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=4086)
                                      Index Cond: (id = mc1.movie_id)
                          ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.005..0.005 rows=2 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.003..0.004 rows=2 loops=1)
                                      Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                      Rows Removed by Filter: 5
                    ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=1)
                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                          ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=1)
                                Filter: ((info)::text = 'rating'::text)
                                Rows Removed by Filter: 112
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=46)
                    Index Cond: (movie_id = t2.id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 59.359 ms
Execution time: 52.256 ms
