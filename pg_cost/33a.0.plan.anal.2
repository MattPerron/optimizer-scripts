Aggregate  (cost=9923.33..9923.34 rows=1 width=192) (actual time=201.787..201.787 rows=1 loops=1)
  ->  Nested Loop  (cost=1142.65..9923.32 rows=1 width=82) (actual time=35.784..201.772 rows=8 loops=1)
        ->  Nested Loop  (cost=1142.52..9923.15 rows=1 width=86) (actual time=35.778..201.758 rows=8 loops=1)
              Join Filter: (ml.linked_movie_id = t2.id)
              ->  Nested Loop  (cost=1142.09..9922.61 rows=1 width=77) (actual time=35.767..201.673 rows=35 loops=1)
                    ->  Nested Loop  (cost=1141.94..9921.62 rows=6 width=81) (actual time=5.356..186.050 rows=16293 loops=1)
                          ->  Nested Loop  (cost=1141.52..9918.96 rows=6 width=66) (actual time=5.353..158.484 rows=16293 loops=1)
                                Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                ->  Nested Loop  (cost=1141.09..9918.22 rows=1 width=58) (actual time=5.345..147.579 rows=2631 loops=1)
                                      ->  Hash Join  (cost=1140.67..9916.16 rows=1 width=45) (actual time=5.335..141.960 rows=1849 loops=1)
                                            Hash Cond: (mi_idx1.info_type_id = it1.id)
                                            ->  Nested Loop  (cost=1138.24..9911.93 rows=144 width=49) (actual time=5.309..141.110 rows=5547 loops=1)
                                                  ->  Nested Loop  (cost=1137.81..9772.39 rows=264 width=52) (actual time=5.303..136.076 rows=1988 loops=1)
                                                        ->  Nested Loop  (cost=1137.39..9444.00 rows=737 width=37) (actual time=5.271..125.070 rows=5983 loops=1)
                                                              ->  Hash Join  (cost=1136.96..9009.49 rows=714 width=29) (actual time=5.260..120.024 rows=1454 loops=1)
                                                                    Hash Cond: (t1.kind_id = kt1.id)
                                                                    ->  Merge Join  (cost=1135.86..8951.60 rows=5000 width=33) (actual time=5.253..119.620 rows=2315 loops=1)
                                                                          Merge Cond: (t1.id = ml.movie_id)
                                                                          ->  Index Scan using title_pkey on title t1  (cost=0.43..102072.27 rows=2528312 width=25) (actual time=0.009..96.702 rows=186176 loops=1)
                                                                          ->  Sort  (cost=1135.37..1147.87 rows=5000 width=8) (actual time=4.932..5.152 rows=2315 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Hash Join  (cost=1.29..828.18 rows=5000 width=8) (actual time=0.021..4.609 rows=2315 loops=1)
                                                                                      Hash Cond: (ml.link_type_id = lt.id)
                                                                                      ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.006..2.053 rows=29997 loops=1)
                                                                                      ->  Hash  (cost=1.25..1.25 rows=3 width=4) (actual time=0.007..0.007 rows=2 loops=1)
                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=3 width=4) (actual time=0.004..0.006 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                    ->  Hash  (cost=1.09..1.09 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=1)
                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                          ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=1)
                                                                                Filter: ((kind)::text = 'tv series'::text)
                                                                                Rows Removed by Filter: 6
                                                              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=1454)
                                                                    Index Cond: (movie_id = t1.id)
                                                        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=5983)
                                                              Index Cond: (id = mc1.company_id)
                                                              Filter: ((country_code)::text = '[us]'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=1988)
                                                        Index Cond: (movie_id = t1.id)
                                            ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=1)
                                                  Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                  ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=1)
                                                        Filter: ((info)::text = 'rating'::text)
                                                        Rows Removed by Filter: 112
                                      ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.003 rows=1 loops=1849)
                                            Index Cond: (movie_id = ml.linked_movie_id)
                                            Filter: (info < '3.0'::text)
                                            Rows Removed by Filter: 1
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.002..0.003 rows=6 loops=2631)
                                      Index Cond: (movie_id = mi_idx2.movie_id)
                          ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=16293)
                                Index Cond: (id = mc2.company_id)
                    ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=16293)
                          Index Cond: (id = mi_idx2.info_type_id)
                          Filter: ((info)::text = 'rating'::text)
                          Rows Removed by Filter: 1
              ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=35)
                    Index Cond: (id = mc2.movie_id)
                    Filter: ((production_year >= 2005) AND (production_year <= 2008))
                    Rows Removed by Filter: 1
        ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=8)
              Index Cond: (id = t2.kind_id)
              Filter: ((kind)::text = 'tv series'::text)
Planning time: 63.682 ms
Execution time: 201.913 ms
