Aggregate  (cost=9402.43..9402.44 rows=1 width=192) (actual time=196.143..196.143 rows=1 loops=1)
  ->  Nested Loop  (cost=8.08..9402.42 rows=1 width=82) (actual time=25.116..196.055 rows=114 loops=1)
        ->  Nested Loop  (cost=7.95..9402.25 rows=1 width=86) (actual time=25.112..195.939 rows=114 loops=1)
              ->  Nested Loop  (cost=7.53..9401.81 rows=1 width=71) (actual time=25.108..195.685 rows=131 loops=1)
                    ->  Nested Loop  (cost=7.40..9401.49 rows=2 width=75) (actual time=21.605..195.510 rows=150 loops=1)
                          Join Filter: (ml.linked_movie_id = t2.id)
                          ->  Nested Loop  (cost=6.97..9398.83 rows=5 width=66) (actual time=21.595..194.921 rows=293 loops=1)
                                ->  Nested Loop  (cost=6.83..9315.74 rows=511 width=70) (actual time=0.150..132.191 rows=71662 loops=1)
                                      ->  Nested Loop  (cost=6.40..9014.51 rows=495 width=78) (actual time=0.146..92.374 rows=12349 loops=1)
                                            ->  Nested Loop  (cost=5.98..8795.18 rows=495 width=63) (actual time=0.140..69.641 rows=12349 loops=1)
                                                  Join Filter: (ml.linked_movie_id = mc2.movie_id)
                                                  ->  Nested Loop  (cost=5.55..8734.12 rows=84 width=55) (actual time=0.133..58.422 rows=2904 loops=1)
                                                        ->  Hash Join  (cost=5.12..8620.24 rows=55 width=42) (actual time=0.124..51.776 rows=2064 loops=1)
                                                              Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                              ->  Nested Loop  (cost=2.69..8540.13 rows=6192 width=46) (actual time=0.095..50.819 rows=6192 loops=1)
                                                                    Join Filter: (ml.movie_id = t1.id)
                                                                    ->  Hash Join  (cost=2.26..4921.27 rows=6192 width=21) (actual time=0.088..40.299 rows=6192 loops=1)
                                                                          Hash Cond: (ml.link_type_id = lt.id)
                                                                          ->  Merge Join  (cost=0.99..4159.69 rows=62670 width=25) (actual time=0.015..35.224 rows=62670 loops=1)
                                                                                Merge Cond: (ml.movie_id = mi_idx1.movie_id)
                                                                                ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.007..4.351 rows=29997 loops=1)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.006..14.571 rows=114373 loops=1)
                                                                          ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                    ->  Index Scan using title_pkey on title t1  (cost=0.43..0.57 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=6192)
                                                                          Index Cond: (id = mi_idx1.movie_id)
                                                              ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=2064)
                                                              Index Cond: (movie_id = ml.linked_movie_id)
                                                              Filter: (info < '3.5'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.66 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=2904)
                                                        Index Cond: (movie_id = mi_idx2.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=12349)
                                                  Index Cond: (id = mc2.company_id)
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.001..0.002 rows=6 loops=12349)
                                            Index Cond: (movie_id = t1.id)
                                ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=71662)
                                      Index Cond: (id = mi_idx2.info_type_id)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 1
                          ->  Index Scan using title_pkey on title t2  (cost=0.43..0.52 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=293)
                                Index Cond: (id = mc2.movie_id)
                                Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                Rows Removed by Filter: 0
                    ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=150)
                          Index Cond: (id = t2.kind_id)
                          Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                          Rows Removed by Filter: 0
              ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
                    Index Cond: (id = mc1.company_id)
                    Filter: ((country_code)::text <> '[us]'::text)
                    Rows Removed by Filter: 0
        ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=114)
              Index Cond: (id = t1.kind_id)
              Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
Planning time: 59.114 ms
Execution time: 196.267 ms
