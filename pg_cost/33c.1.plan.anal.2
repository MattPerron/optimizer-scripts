Aggregate  (cost=5815.36..5815.37 rows=1 width=192) (actual time=132.344..132.344 rows=1 loops=1)
  ->  Nested Loop  (cost=8.08..5815.35 rows=1 width=82) (actual time=16.607..132.262 rows=114 loops=1)
        ->  Nested Loop  (cost=7.94..5815.17 rows=1 width=86) (actual time=0.471..113.863 rows=20134 loops=1)
              ->  Nested Loop  (cost=7.52..5814.72 rows=1 width=71) (actual time=0.467..82.698 rows=20134 loops=1)
                    ->  Nested Loop  (cost=7.09..5814.06 rows=1 width=79) (actual time=0.461..69.572 rows=4086 loops=1)
                          ->  Nested Loop  (cost=6.96..5813.74 rows=2 width=83) (actual time=0.459..65.470 rows=4086 loops=1)
                                ->  Nested Loop  (cost=6.54..5812.40 rows=3 width=68) (actual time=0.454..57.533 rows=4518 loops=1)
                                      ->  Nested Loop  (cost=6.11..5810.58 rows=3 width=76) (actual time=0.447..54.059 rows=1064 loops=1)
                                            ->  Nested Loop  (cost=5.68..5805.05 rows=10 width=63) (actual time=0.443..51.836 rows=737 loops=1)
                                                  ->  Nested Loop  (cost=5.55..5799.56 rows=36 width=67) (actual time=0.139..50.947 rows=851 loops=1)
                                                        ->  Nested Loop  (cost=5.12..5429.88 rows=88 width=42) (actual time=0.121..45.689 rows=2064 loops=1)
                                                              Join Filter: (ml.movie_id = t1.id)
                                                              ->  Hash Join  (cost=4.69..5378.45 rows=88 width=17) (actual time=0.113..41.674 rows=2064 loops=1)
                                                                    Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                    ->  Hash Join  (cost=2.26..5250.80 rows=9981 width=21) (actual time=0.098..40.879 rows=6192 loops=1)
                                                                          Hash Cond: (ml.link_type_id = lt.id)
                                                                          ->  Merge Join  (cost=0.99..4159.69 rows=89832 width=25) (actual time=0.016..35.775 rows=62670 loops=1)
                                                                                Merge Cond: (ml.movie_id = mi_idx1.movie_id)
                                                                                ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.007..4.369 rows=29997 loops=1)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.006..14.810 rows=114373 loops=1)
                                                                          ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.012..0.012 rows=2 loops=1)
                                                                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.007..0.010 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                    ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                              ->  Index Scan using title_pkey on title t1  (cost=0.43..0.57 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=2064)
                                                                    Index Cond: (id = mi_idx1.movie_id)
                                                        ->  Index Scan using title_pkey on title t2  (cost=0.43..4.20 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2064)
                                                              Index Cond: (id = ml.linked_movie_id)
                                                              Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=851)
                                                        Index Cond: (id = t2.kind_id)
                                                        Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                        Rows Removed by Filter: 0
                                            ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.53 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=737)
                                                  Index Cond: (movie_id = t2.id)
                                                  Filter: (info < '3.5'::text)
                                                  Rows Removed by Filter: 1
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.002 rows=4 loops=1064)
                                            Index Cond: (movie_id = t1.id)
                                ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=4518)
                                      Index Cond: (id = mc1.company_id)
                                      Filter: ((country_code)::text <> '[us]'::text)
                                      Rows Removed by Filter: 0
                          ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=4086)
                                Index Cond: (id = t1.kind_id)
                                Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                    ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.001..0.002 rows=5 loops=4086)
                          Index Cond: (movie_id = t2.id)
              ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=20134)
                    Index Cond: (id = mc2.company_id)
        ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=20134)
              Index Cond: (id = mi_idx2.info_type_id)
              Filter: ((info)::text = 'rating'::text)
              Rows Removed by Filter: 1
Planning time: 59.608 ms
Execution time: 132.462 ms
