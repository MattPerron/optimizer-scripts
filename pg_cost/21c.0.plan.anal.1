Aggregate  (cost=8730.14..8730.15 rows=1 width=96) (actual time=47.156..47.156 rows=1 loops=1)
  ->  Nested Loop  (cost=3545.70..8730.13 rows=1 width=48) (actual time=18.095..46.556 rows=1874 loops=1)
        Join Filter: (ml.movie_id = t.id)
        ->  Nested Loop  (cost=3545.27..8729.63 rows=1 width=47) (actual time=18.088..43.837 rows=1874 loops=1)
              Join Filter: (ml.movie_id = mi.movie_id)
              ->  Nested Loop  (cost=3544.83..8727.77 rows=1 width=43) (actual time=18.076..39.900 rows=402 loops=1)
                    ->  Nested Loop  (cost=3544.70..8727.60 rows=1 width=47) (actual time=18.072..39.514 rows=422 loops=1)
                          ->  Nested Loop  (cost=3544.28..8727.14 rows=1 width=32) (actual time=14.542..37.752 rows=1021 loops=1)
                                Join Filter: (ml.movie_id = mc.movie_id)
                                ->  Hash Join  (cost=3543.85..8726.56 rows=1 width=20) (actual time=14.531..36.970 rows=199 loops=1)
                                      Hash Cond: (mk.keyword_id = k.id)
                                      ->  Merge Join  (cost=917.72..5149.67 rows=75308 width=24) (actual time=5.477..27.060 rows=17543 loops=1)
                                            Merge Cond: (mk.movie_id = ml.movie_id)
                                            ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..141990.43 rows=4523930 width=8) (actual time=0.007..12.228 rows=97855 loops=1)
                                            ->  Sort  (cost=917.28..921.45 rows=1666 width=16) (actual time=5.449..6.265 rows=18063 loops=1)
                                                  Sort Key: ml.movie_id
                                                  Sort Method: quicksort  Memory: 205kB
                                                  ->  Hash Join  (cost=1.24..828.13 rows=1666 width=16) (actual time=0.023..5.015 rows=2315 loops=1)
                                                        Hash Cond: (ml.link_type_id = lt.id)
                                                        ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=8) (actual time=0.006..2.183 rows=29997 loops=1)
                                                        ->  Hash  (cost=1.23..1.23 rows=1 width=16) (actual time=0.008..0.008 rows=2 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=16) (actual time=0.003..0.006 rows=2 loops=1)
                                                                    Filter: ((link)::text ~~ '%follow%'::text)
                                                                    Rows Removed by Filter: 16
                                      ->  Hash  (cost=2626.12..2626.12 rows=1 width=4) (actual time=8.785..8.785 rows=1 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.542..8.784 rows=1 loops=1)
                                                  Filter: (keyword = 'sequel'::text)
                                                  Rows Removed by Filter: 134169
                                ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=3 width=12) (actual time=0.002..0.003 rows=5 loops=199)
                                      Index Cond: (movie_id = mk.movie_id)
                                      Filter: (note IS NULL)
                                      Rows Removed by Filter: 2
                          ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1021)
                                Index Cond: (id = mc.company_id)
                                Filter: (((country_code)::text <> '[pl]'::text) AND ((name ~~ '%Film%'::text) OR (name ~~ '%Warner%'::text)))
                                Rows Removed by Filter: 1
                    ->  Index Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=422)
                          Index Cond: (id = mc.company_type_id)
                          Filter: ((kind)::text = 'production companies'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.82 rows=3 width=4) (actual time=0.007..0.009 rows=5 loops=402)
                    Index Cond: (movie_id = mk.movie_id)
                    Filter: (info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,English}'::text[]))
                    Rows Removed by Filter: 16
        ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.001..0.001 rows=1 loops=1874)
              Index Cond: (id = mk.movie_id)
              Filter: ((production_year >= 1950) AND (production_year <= 2010))
Planning time: 7.471 ms
Execution time: 47.227 ms
