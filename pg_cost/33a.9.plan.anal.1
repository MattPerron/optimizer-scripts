Aggregate  (cost=10384.98..10384.99 rows=1 width=192) (actual time=25.854..25.854 rows=1 loops=1)
  ->  Nested Loop  (cost=5.24..10384.96 rows=1 width=82) (actual time=4.479..25.841 rows=8 loops=1)
        ->  Nested Loop  (cost=5.09..10384.78 rows=1 width=86) (actual time=4.432..25.817 rows=24 loops=1)
              ->  Nested Loop  (cost=4.96..10383.85 rows=6 width=90) (actual time=4.430..25.794 rows=24 loops=1)
                    ->  Nested Loop  (cost=4.54..10381.20 rows=6 width=75) (actual time=4.427..25.752 rows=24 loops=1)
                          Join Filter: (t2.id = mc2.movie_id)
                          ->  Nested Loop  (cost=4.11..10376.77 rows=6 width=83) (actual time=4.421..25.728 rows=6 loops=1)
                                ->  Nested Loop  (cost=3.97..10273.84 rows=633 width=87) (actual time=0.118..25.104 rows=633 loops=1)
                                      ->  Nested Loop  (cost=3.84..10167.16 rows=693 width=91) (actual time=0.115..24.446 rows=693 loops=1)
                                            Join Filter: (ml.movie_id = t1.id)
                                            ->  Nested Loop  (cost=3.41..9802.77 rows=693 width=82) (actual time=0.110..23.224 rows=693 loops=1)
                                                  Join Filter: (ml.movie_id = mi_idx1.movie_id)
                                                  ->  Nested Loop  (cost=2.98..9675.32 rows=238 width=69) (actual time=0.105..22.540 rows=238 loops=1)
                                                        ->  Nested Loop  (cost=2.56..8957.93 rows=1610 width=54) (actual time=0.075..19.550 rows=1610 loops=1)
                                                              ->  Nested Loop  (cost=2.13..7735.41 rows=308 width=46) (actual time=0.069..18.301 rows=308 loops=1)
                                                                    Join Filter: (ml.linked_movie_id = t2.id)
                                                                    ->  Nested Loop  (cost=1.70..5598.43 rows=2944 width=21) (actual time=0.044..11.774 rows=2944 loops=1)
                                                                          ->  Hash Join  (cost=1.27..828.17 rows=2315 width=8) (actual time=0.032..5.086 rows=2315 loops=1)
                                                                                Hash Cond: (ml.link_type_id = lt.id)
                                                                                ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.010..2.225 rows=29997 loops=1)
                                                                                ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.009..0.009 rows=2 loops=1)
                                                                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                      ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.005..0.008 rows=2 loops=1)
                                                                                            Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                            Rows Removed by Filter: 16
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                                Index Cond: (movie_id = ml.linked_movie_id)
                                                                                Filter: (info < '3.0'::text)
                                                                                Rows Removed by Filter: 1
                                                                    ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2944)
                                                                          Index Cond: (id = mi_idx2.movie_id)
                                                                          Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                                          Rows Removed by Filter: 1
                                                              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..3.92 rows=5 width=8) (actual time=0.002..0.003 rows=5 loops=308)
                                                                    Index Cond: (movie_id = ml.movie_id)
                                                        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1610)
                                                              Index Cond: (id = mc1.company_id)
                                                              Filter: ((country_code)::text = '[us]'::text)
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=13) (actual time=0.002..0.002 rows=3 loops=238)
                                                        Index Cond: (movie_id = mc1.movie_id)
                                            ->  Index Scan using title_pkey on title t1  (cost=0.43..0.51 rows=1 width=25) (actual time=0.001..0.001 rows=1 loops=693)
                                                  Index Cond: (id = mc1.movie_id)
                                      ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=693)
                                            Index Cond: (id = t1.kind_id)
                                            Filter: ((kind)::text = 'tv series'::text)
                                            Rows Removed by Filter: 0
                                ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=633)
                                      Index Cond: (id = mi_idx2.info_type_id)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 1
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.002..0.003 rows=4 loops=6)
                                Index Cond: (movie_id = mi_idx2.movie_id)
                    ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=24)
                          Index Cond: (id = mc2.company_id)
              ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=24)
                    Index Cond: (id = t2.kind_id)
                    Filter: ((kind)::text = 'tv series'::text)
        ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=24)
              Index Cond: (id = mi_idx1.info_type_id)
              Filter: ((info)::text = 'rating'::text)
              Rows Removed by Filter: 1
Planning time: 62.325 ms
Execution time: 25.970 ms
