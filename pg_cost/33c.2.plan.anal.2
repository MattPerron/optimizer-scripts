Aggregate  (cost=5685.58..5685.59 rows=1 width=192) (actual time=92.966..92.966 rows=1 loops=1)
  ->  Nested Loop  (cost=8.08..5685.57 rows=1 width=82) (actual time=13.415..92.884 rows=114 loops=1)
        ->  Nested Loop  (cost=7.66..5685.12 rows=1 width=67) (actual time=13.411..92.662 rows=114 loops=1)
              ->  Nested Loop  (cost=7.53..5684.96 rows=1 width=71) (actual time=13.408..92.533 rows=114 loops=1)
                    Join Filter: (ml.movie_id = t1.id)
                    ->  Nested Loop  (cost=7.10..5684.43 rows=1 width=62) (actual time=13.401..92.291 rows=114 loops=1)
                          ->  Nested Loop  (cost=6.67..5683.77 rows=1 width=70) (actual time=13.394..92.125 rows=46 loops=1)
                                ->  Nested Loop  (cost=6.54..5683.60 rows=1 width=74) (actual time=11.825..92.031 rows=72 loops=1)
                                      Join Filter: (ml.linked_movie_id = t2.id)
                                      ->  Nested Loop  (cost=6.11..5681.48 rows=3 width=49) (actual time=11.816..91.757 rows=91 loops=1)
                                            ->  Nested Loop  (cost=5.97..5631.55 rows=307 width=53) (actual time=0.135..82.443 rows=9968 loops=1)
                                                  ->  Nested Loop  (cost=5.54..5217.43 rows=200 width=40) (actual time=0.126..65.189 rows=7279 loops=1)
                                                        ->  Nested Loop  (cost=5.12..5051.68 rows=372 width=25) (actual time=0.120..48.303 rows=9674 loops=1)
                                                              Join Filter: (ml.movie_id = mc1.movie_id)
                                                              ->  Hash Join  (cost=4.69..5011.05 rows=62 width=17) (actual time=0.114..41.236 rows=2064 loops=1)
                                                                    Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                    ->  Hash Join  (cost=2.26..4921.27 rows=6963 width=21) (actual time=0.098..40.442 rows=6192 loops=1)
                                                                          Hash Cond: (ml.link_type_id = lt.id)
                                                                          ->  Merge Join  (cost=0.99..4159.69 rows=62670 width=25) (actual time=0.016..35.369 rows=62670 loops=1)
                                                                                Merge Cond: (ml.movie_id = mi_idx1.movie_id)
                                                                                ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.007..4.342 rows=29997 loops=1)
                                                                                ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.006..14.649 rows=114373 loops=1)
                                                                          ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.012..0.012 rows=2 loops=1)
                                                                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.008..0.010 rows=2 loops=1)
                                                                                      Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                      Rows Removed by Filter: 16
                                                                    ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                              ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.002 rows=5 loops=2064)
                                                                    Index Cond: (movie_id = mi_idx1.movie_id)
                                                        ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=9674)
                                                              Index Cond: (id = mc1.company_id)
                                                              Filter: ((country_code)::text <> '[us]'::text)
                                                              Rows Removed by Filter: 0
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.002..0.002 rows=1 loops=7279)
                                                        Index Cond: (movie_id = ml.linked_movie_id)
                                                        Filter: (info < '3.5'::text)
                                                        Rows Removed by Filter: 1
                                            ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=9968)
                                                  Index Cond: (id = mi_idx2.info_type_id)
                                                  Filter: ((info)::text = 'rating'::text)
                                                  Rows Removed by Filter: 1
                                      ->  Index Scan using title_pkey on title t2  (cost=0.43..0.70 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=91)
                                            Index Cond: (id = mi_idx2.movie_id)
                                            Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                            Rows Removed by Filter: 0
                                ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=72)
                                      Index Cond: (id = t2.kind_id)
                                      Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                      Rows Removed by Filter: 0
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=46)
                                Index Cond: (movie_id = t2.id)
                    ->  Index Scan using title_pkey on title t1  (cost=0.43..0.51 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=114)
                          Index Cond: (id = mc1.movie_id)
              ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=114)
                    Index Cond: (id = t1.kind_id)
                    Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 59.752 ms
Execution time: 93.086 ms
