Aggregate  (cost=13688.48..13688.49 rows=1 width=192) (actual time=123.330..123.330 rows=1 loops=1)
  ->  Nested Loop  (cost=968.06..13688.46 rows=1 width=82) (actual time=20.528..123.236 rows=114 loops=1)
        ->  Nested Loop  (cost=967.64..13688.02 rows=1 width=67) (actual time=20.524..122.989 rows=114 loops=1)
              ->  Nested Loop  (cost=967.21..13687.35 rows=1 width=75) (actual time=20.519..122.813 rows=46 loops=1)
                    ->  Nested Loop  (cost=966.79..13686.91 rows=1 width=60) (actual time=20.510..122.652 rows=51 loops=1)
                          ->  Hash Join  (cost=966.36..13686.30 rows=1 width=68) (actual time=20.501..122.546 rows=19 loops=1)
                                Hash Cond: (mi_idx1.info_type_id = it1.id)
                                ->  Hash Join  (cost=963.94..13683.58 rows=23 width=72) (actual time=20.471..122.505 rows=57 loops=1)
                                      Hash Cond: (t2.kind_id = kt2.id)
                                      ->  Nested Loop  (cost=962.82..13681.56 rows=81 width=76) (actual time=17.757..122.473 rows=81 loops=1)
                                            Join Filter: (ml.linked_movie_id = t2.id)
                                            ->  Nested Loop  (cost=962.39..13594.47 rows=123 width=51) (actual time=17.748..122.138 rows=123 loops=1)
                                                  ->  Hash Join  (cost=961.97..13569.62 rows=47 width=38) (actual time=17.741..121.972 rows=47 loops=1)
                                                        Hash Cond: (t1.kind_id = kt1.id)
                                                        ->  Hash Join  (cost=960.85..13567.98 rows=47 width=42) (actual time=17.734..121.943 rows=47 loops=1)
                                                              Hash Cond: (mi_idx2.info_type_id = it2.id)
                                                              ->  Nested Loop  (cost=958.43..13526.91 rows=3080 width=46) (actual time=5.109..121.661 rows=3080 loops=1)
                                                                    ->  Merge Join  (cost=958.00..8733.49 rows=2315 width=33) (actual time=5.095..114.677 rows=2315 loops=1)
                                                                          Merge Cond: (t1.id = ml.movie_id)
                                                                          ->  Index Scan using title_pkey on title t1  (cost=0.43..102072.27 rows=2528312 width=25) (actual time=0.008..92.175 rows=186176 loops=1)
                                                                          ->  Sort  (cost=957.54..963.33 rows=2315 width=8) (actual time=4.766..4.982 rows=2315 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Hash Join  (cost=1.27..828.17 rows=2315 width=8) (actual time=0.021..4.473 rows=2315 loops=1)
                                                                                      Hash Cond: (ml.link_type_id = lt.id)
                                                                                      ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.005..2.001 rows=29997 loops=1)
                                                                                      ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                    ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=2 width=13) (actual time=0.002..0.003 rows=1 loops=2315)
                                                                          Index Cond: (movie_id = ml.linked_movie_id)
                                                                          Filter: (info < '3.5'::text)
                                                                          Rows Removed by Filter: 1
                                                              ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                    ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=1)
                                                                          Filter: ((info)::text = 'rating'::text)
                                                                          Rows Removed by Filter: 112
                                                        ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.003..0.003 rows=2 loops=1)
                                                              Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                              ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.001..0.002 rows=2 loops=1)
                                                                    Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                                    Rows Removed by Filter: 5
                                                  ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..0.50 rows=3 width=13) (actual time=0.002..0.003 rows=3 loops=47)
                                                        Index Cond: (movie_id = t1.id)
                                            ->  Index Scan using title_pkey on title t2  (cost=0.43..0.70 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=123)
                                                  Index Cond: (id = mi_idx2.movie_id)
                                                  Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                  Rows Removed by Filter: 0
                                      ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.005..0.005 rows=2 loops=1)
                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                            ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=2 width=4) (actual time=0.004..0.004 rows=2 loops=1)
                                                  Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                  Rows Removed by Filter: 5
                                ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=1)
                                      Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                      ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.016..0.018 rows=1 loops=1)
                                            Filter: ((info)::text = 'rating'::text)
                                            Rows Removed by Filter: 112
                          ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.003..0.004 rows=3 loops=19)
                                Index Cond: (movie_id = t1.id)
                    ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=51)
                          Index Cond: (id = mc1.company_id)
                          Filter: ((country_code)::text <> '[us]'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=46)
                    Index Cond: (movie_id = t2.id)
        ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=114)
              Index Cond: (id = mc2.company_id)
Planning time: 59.191 ms
Execution time: 123.457 ms
