Aggregate  (cost=3625.36..3625.37 rows=1 width=192) (actual time=39.054..39.054 rows=1 loops=1)
  ->  Nested Loop  (cost=966.08..3625.34 rows=1 width=82) (actual time=10.277..39.041 rows=8 loops=1)
        ->  Nested Loop  (cost=965.95..3625.17 rows=1 width=86) (actual time=10.268..39.025 rows=8 loops=1)
              ->  Nested Loop  (cost=965.82..3625.00 rows=1 width=90) (actual time=10.261..39.010 rows=8 loops=1)
                    Join Filter: (ml.movie_id = t1.id)
                    ->  Hash Join  (cost=965.39..3624.47 rows=1 width=81) (actual time=10.255..38.990 rows=8 loops=1)
                          Hash Cond: (mi_idx2.info_type_id = it2.id)
                          ->  Nested Loop  (cost=962.96..3621.65 rows=31 width=85) (actual time=4.988..38.833 rows=1614 loops=1)
                                ->  Nested Loop  (cost=962.54..3607.92 rows=31 width=70) (actual time=4.984..36.090 rows=1614 loops=1)
                                      Join Filter: (t2.id = mc2.movie_id)
                                      ->  Nested Loop  (cost=962.11..3585.79 rows=30 width=78) (actual time=4.976..35.049 rows=231 loops=1)
                                            ->  Nested Loop  (cost=961.69..3548.36 rows=84 width=63) (actual time=4.945..32.335 rows=1560 loops=1)
                                                  Join Filter: (ml.movie_id = mc1.movie_id)
                                                  ->  Nested Loop  (cost=961.26..3539.19 rows=14 width=55) (actual time=4.938..31.153 rows=276 loops=1)
                                                        Join Filter: (ml.linked_movie_id = t2.id)
                                                        ->  Nested Loop  (cost=960.83..3481.84 rows=79 width=30) (actual time=4.911..25.101 rows=2786 loops=1)
                                                              ->  Hash Join  (cost=960.40..3368.51 rows=55 width=17) (actual time=4.898..19.222 rows=2064 loops=1)
                                                                    Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                    ->  Merge Join  (cost=957.98..3288.40 rows=6192 width=21) (actual time=4.883..18.463 rows=6192 loops=1)
                                                                          Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                          ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43802.43 rows=1380035 width=13) (actual time=0.013..8.017 rows=63901 loops=1)
                                                                          ->  Sort  (cost=957.54..963.33 rows=2315 width=8) (actual time=4.845..5.190 rows=6443 loops=1)
                                                                                Sort Key: ml.movie_id
                                                                                Sort Method: quicksort  Memory: 205kB
                                                                                ->  Hash Join  (cost=1.27..828.17 rows=2315 width=8) (actual time=0.020..4.525 rows=2315 loops=1)
                                                                                      Hash Cond: (ml.link_type_id = lt.id)
                                                                                      ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.005..2.010 rows=29997 loops=1)
                                                                                      ->  Hash  (cost=1.25..1.25 rows=2 width=4) (actual time=0.006..0.006 rows=2 loops=1)
                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                            ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=2 width=4) (actual time=0.003..0.006 rows=2 loops=1)
                                                                                                  Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                  Rows Removed by Filter: 16
                                                                    ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1)
                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                          ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                Filter: ((info)::text = 'rating'::text)
                                                                                Rows Removed by Filter: 112
                                                              ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=13) (actual time=0.002..0.003 rows=1 loops=2064)
                                                                    Index Cond: (movie_id = ml.linked_movie_id)
                                                                    Filter: (info < '3.0'::text)
                                                                    Rows Removed by Filter: 1
                                                        ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=2786)
                                                              Index Cond: (id = mi_idx2.movie_id)
                                                              Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                                              Rows Removed by Filter: 1
                                                  ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.003 rows=6 loops=276)
                                                        Index Cond: (movie_id = mi_idx1.movie_id)
                                            ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1560)
                                                  Index Cond: (id = mc1.company_id)
                                                  Filter: ((country_code)::text = '[us]'::text)
                                                  Rows Removed by Filter: 1
                                      ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.68 rows=5 width=8) (actual time=0.002..0.003 rows=7 loops=231)
                                            Index Cond: (movie_id = mi_idx2.movie_id)
                                ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=1614)
                                      Index Cond: (id = mc2.company_id)
                          ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.018..0.018 rows=1 loops=1)
                                Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=1)
                                      Filter: ((info)::text = 'rating'::text)
                                      Rows Removed by Filter: 112
                    ->  Index Scan using title_pkey on title t1  (cost=0.43..0.51 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=8)
                          Index Cond: (id = mc1.movie_id)
              ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=8)
                    Index Cond: (id = t1.kind_id)
                    Filter: ((kind)::text = 'tv series'::text)
        ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=8)
              Index Cond: (id = t2.kind_id)
              Filter: ((kind)::text = 'tv series'::text)
Planning time: 62.041 ms
Execution time: 39.181 ms
